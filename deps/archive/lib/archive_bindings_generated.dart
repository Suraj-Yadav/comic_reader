// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/archive.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ArchiveBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ArchiveBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ArchiveBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Basic object manipulation
  ffi.Pointer<archive_entry> archive_entry_clear(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_clear(
      arg0,
    );
  }

  late final _archive_entry_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<archive_entry> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_clear');
  late final _archive_entry_clear = _archive_entry_clearPtr.asFunction<
      ffi.Pointer<archive_entry> Function(ffi.Pointer<archive_entry>)>();

  /// The 'clone' function does a deep copy; all of the strings are copied too.
  ffi.Pointer<archive_entry> archive_entry_clone(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_clone(
      arg0,
    );
  }

  late final _archive_entry_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<archive_entry> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_clone');
  late final _archive_entry_clone = _archive_entry_clonePtr.asFunction<
      ffi.Pointer<archive_entry> Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_free(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_free(
      arg0,
    );
  }

  late final _archive_entry_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_free');
  late final _archive_entry_free = _archive_entry_freePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<archive_entry> archive_entry_new() {
    return _archive_entry_new();
  }

  late final _archive_entry_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<archive_entry> Function()>>(
          'archive_entry_new');
  late final _archive_entry_new =
      _archive_entry_newPtr.asFunction<ffi.Pointer<archive_entry> Function()>();

  /// This form of archive_entry_new2() will pull character-set
  /// conversion information from the specified archive handle.  The
  /// older archive_entry_new(void) form is equivalent to calling
  /// archive_entry_new2(NULL) and will result in the use of an internal
  /// default character-set conversion.
  ffi.Pointer<archive_entry> archive_entry_new2(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_entry_new2(
      arg0,
    );
  }

  late final _archive_entry_new2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<archive_entry> Function(
              ffi.Pointer<archive>)>>('archive_entry_new2');
  late final _archive_entry_new2 = _archive_entry_new2Ptr
      .asFunction<ffi.Pointer<archive_entry> Function(ffi.Pointer<archive>)>();

  /// Retrieve fields from an archive_entry.
  ///
  /// There are a number of implicit conversions among these fields.  For
  /// example, if a regular string field is set and you read the _w wide
  /// character field, the entry will implicitly convert narrow-to-wide
  /// using the current locale.  Similarly, dev values are automatically
  /// updated when you write devmajor or devminor and vice versa.
  ///
  /// In addition, fields can be "set" or "unset."  Unset string fields
  /// return NULL, non-string fields have _is_set() functions to test
  /// whether they've been set.  You can "unset" a string field by
  /// assigning NULL; non-string fields have _unset() functions to
  /// unset them.
  ///
  /// Note: There is one ambiguity in the above; string fields will
  /// also return NULL when implicit character set conversions fail.
  /// This is usually what you want.
  int archive_entry_atime(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_atime(
      arg0,
    );
  }

  late final _archive_entry_atimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_atime');
  late final _archive_entry_atime = _archive_entry_atimePtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_atime_nsec(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_atime_nsec(
      arg0,
    );
  }

  late final _archive_entry_atime_nsecPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_atime_nsec');
  late final _archive_entry_atime_nsec = _archive_entry_atime_nsecPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_atime_is_set(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_atime_is_set(
      arg0,
    );
  }

  late final _archive_entry_atime_is_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_atime_is_set');
  late final _archive_entry_atime_is_set = _archive_entry_atime_is_setPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_birthtime(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_birthtime(
      arg0,
    );
  }

  late final _archive_entry_birthtimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_birthtime');
  late final _archive_entry_birthtime = _archive_entry_birthtimePtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_birthtime_nsec(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_birthtime_nsec(
      arg0,
    );
  }

  late final _archive_entry_birthtime_nsecPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_birthtime_nsec');
  late final _archive_entry_birthtime_nsec = _archive_entry_birthtime_nsecPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_birthtime_is_set(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_birthtime_is_set(
      arg0,
    );
  }

  late final _archive_entry_birthtime_is_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_birthtime_is_set');
  late final _archive_entry_birthtime_is_set =
      _archive_entry_birthtime_is_setPtr
          .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_ctime(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_ctime(
      arg0,
    );
  }

  late final _archive_entry_ctimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_ctime');
  late final _archive_entry_ctime = _archive_entry_ctimePtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_ctime_nsec(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_ctime_nsec(
      arg0,
    );
  }

  late final _archive_entry_ctime_nsecPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_ctime_nsec');
  late final _archive_entry_ctime_nsec = _archive_entry_ctime_nsecPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_ctime_is_set(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_ctime_is_set(
      arg0,
    );
  }

  late final _archive_entry_ctime_is_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_ctime_is_set');
  late final _archive_entry_ctime_is_set = _archive_entry_ctime_is_setPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_dev(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_dev(
      arg0,
    );
  }

  late final _archive_entry_devPtr =
      _lookup<ffi.NativeFunction<dev_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_dev');
  late final _archive_entry_dev = _archive_entry_devPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_dev_is_set(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_dev_is_set(
      arg0,
    );
  }

  late final _archive_entry_dev_is_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_dev_is_set');
  late final _archive_entry_dev_is_set = _archive_entry_dev_is_setPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_devmajor(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_devmajor(
      arg0,
    );
  }

  late final _archive_entry_devmajorPtr =
      _lookup<ffi.NativeFunction<dev_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_devmajor');
  late final _archive_entry_devmajor = _archive_entry_devmajorPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_devminor(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_devminor(
      arg0,
    );
  }

  late final _archive_entry_devminorPtr =
      _lookup<ffi.NativeFunction<dev_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_devminor');
  late final _archive_entry_devminor = _archive_entry_devminorPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_filetype(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_filetype(
      arg0,
    );
  }

  late final _archive_entry_filetypePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_filetype');
  late final _archive_entry_filetype = _archive_entry_filetypePtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_fflags(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.UnsignedLong> arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
  ) {
    return _archive_entry_fflags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_fflagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>)>>('archive_entry_fflags');
  late final _archive_entry_fflags = _archive_entry_fflagsPtr.asFunction<
      void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.UnsignedLong>)>();

  ffi.Pointer<ffi.Char> archive_entry_fflags_text(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_fflags_text(
      arg0,
    );
  }

  late final _archive_entry_fflags_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_fflags_text');
  late final _archive_entry_fflags_text = _archive_entry_fflags_textPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_gid(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_gid(
      arg0,
    );
  }

  late final _archive_entry_gidPtr = _lookup<
          ffi.NativeFunction<la_int64_t Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_gid');
  late final _archive_entry_gid = _archive_entry_gidPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_gname(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_gname(
      arg0,
    );
  }

  late final _archive_entry_gnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_gname');
  late final _archive_entry_gname = _archive_entry_gnamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_gname_utf8(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_gname_utf8(
      arg0,
    );
  }

  late final _archive_entry_gname_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_gname_utf8');
  late final _archive_entry_gname_utf8 = _archive_entry_gname_utf8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.WChar> archive_entry_gname_w(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_gname_w(
      arg0,
    );
  }

  late final _archive_entry_gname_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_gname_w');
  late final _archive_entry_gname_w = _archive_entry_gname_wPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_hardlink(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_hardlink(
      arg0,
    );
  }

  late final _archive_entry_hardlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_hardlink');
  late final _archive_entry_hardlink = _archive_entry_hardlinkPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_hardlink_utf8(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_hardlink_utf8(
      arg0,
    );
  }

  late final _archive_entry_hardlink_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_hardlink_utf8');
  late final _archive_entry_hardlink_utf8 = _archive_entry_hardlink_utf8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.WChar> archive_entry_hardlink_w(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_hardlink_w(
      arg0,
    );
  }

  late final _archive_entry_hardlink_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_hardlink_w');
  late final _archive_entry_hardlink_w =
      _archive_entry_hardlink_wPtr.asFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_ino(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_ino(
      arg0,
    );
  }

  late final _archive_entry_inoPtr = _lookup<
          ffi.NativeFunction<la_int64_t Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_ino');
  late final _archive_entry_ino = _archive_entry_inoPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_ino64(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_ino64(
      arg0,
    );
  }

  late final _archive_entry_ino64Ptr = _lookup<
          ffi.NativeFunction<la_int64_t Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_ino64');
  late final _archive_entry_ino64 = _archive_entry_ino64Ptr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_ino_is_set(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_ino_is_set(
      arg0,
    );
  }

  late final _archive_entry_ino_is_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_ino_is_set');
  late final _archive_entry_ino_is_set = _archive_entry_ino_is_setPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_mode(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_mode(
      arg0,
    );
  }

  late final _archive_entry_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_mode');
  late final _archive_entry_mode = _archive_entry_modePtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_mtime(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_mtime(
      arg0,
    );
  }

  late final _archive_entry_mtimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_mtime');
  late final _archive_entry_mtime = _archive_entry_mtimePtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_mtime_nsec(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_mtime_nsec(
      arg0,
    );
  }

  late final _archive_entry_mtime_nsecPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_mtime_nsec');
  late final _archive_entry_mtime_nsec = _archive_entry_mtime_nsecPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_mtime_is_set(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_mtime_is_set(
      arg0,
    );
  }

  late final _archive_entry_mtime_is_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_mtime_is_set');
  late final _archive_entry_mtime_is_set = _archive_entry_mtime_is_setPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_nlink(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_nlink(
      arg0,
    );
  }

  late final _archive_entry_nlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_nlink');
  late final _archive_entry_nlink = _archive_entry_nlinkPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_pathname(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_pathname(
      arg0,
    );
  }

  late final _archive_entry_pathnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_pathname');
  late final _archive_entry_pathname = _archive_entry_pathnamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_pathname_utf8(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_pathname_utf8(
      arg0,
    );
  }

  late final _archive_entry_pathname_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_pathname_utf8');
  late final _archive_entry_pathname_utf8 = _archive_entry_pathname_utf8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.WChar> archive_entry_pathname_w(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_pathname_w(
      arg0,
    );
  }

  late final _archive_entry_pathname_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_pathname_w');
  late final _archive_entry_pathname_w =
      _archive_entry_pathname_wPtr.asFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_perm(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_perm(
      arg0,
    );
  }

  late final _archive_entry_permPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_perm');
  late final _archive_entry_perm = _archive_entry_permPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_rdev(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_rdev(
      arg0,
    );
  }

  late final _archive_entry_rdevPtr =
      _lookup<ffi.NativeFunction<dev_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_rdev');
  late final _archive_entry_rdev = _archive_entry_rdevPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_rdevmajor(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_rdevmajor(
      arg0,
    );
  }

  late final _archive_entry_rdevmajorPtr =
      _lookup<ffi.NativeFunction<dev_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_rdevmajor');
  late final _archive_entry_rdevmajor = _archive_entry_rdevmajorPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_rdevminor(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_rdevminor(
      arg0,
    );
  }

  late final _archive_entry_rdevminorPtr =
      _lookup<ffi.NativeFunction<dev_t Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_rdevminor');
  late final _archive_entry_rdevminor = _archive_entry_rdevminorPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_sourcepath(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_sourcepath(
      arg0,
    );
  }

  late final _archive_entry_sourcepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_sourcepath');
  late final _archive_entry_sourcepath = _archive_entry_sourcepathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.WChar> archive_entry_sourcepath_w(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_sourcepath_w(
      arg0,
    );
  }

  late final _archive_entry_sourcepath_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_sourcepath_w');
  late final _archive_entry_sourcepath_w =
      _archive_entry_sourcepath_wPtr.asFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_size(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_size(
      arg0,
    );
  }

  late final _archive_entry_sizePtr = _lookup<
          ffi.NativeFunction<la_int64_t Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_size');
  late final _archive_entry_size = _archive_entry_sizePtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_size_is_set(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_size_is_set(
      arg0,
    );
  }

  late final _archive_entry_size_is_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_size_is_set');
  late final _archive_entry_size_is_set = _archive_entry_size_is_setPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_strmode(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_strmode(
      arg0,
    );
  }

  late final _archive_entry_strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_strmode');
  late final _archive_entry_strmode = _archive_entry_strmodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_symlink(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_symlink(
      arg0,
    );
  }

  late final _archive_entry_symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_symlink');
  late final _archive_entry_symlink = _archive_entry_symlinkPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_symlink_utf8(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_symlink_utf8(
      arg0,
    );
  }

  late final _archive_entry_symlink_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_symlink_utf8');
  late final _archive_entry_symlink_utf8 = _archive_entry_symlink_utf8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_symlink_type(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_symlink_type(
      arg0,
    );
  }

  late final _archive_entry_symlink_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_symlink_type');
  late final _archive_entry_symlink_type = _archive_entry_symlink_typePtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.WChar> archive_entry_symlink_w(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_symlink_w(
      arg0,
    );
  }

  late final _archive_entry_symlink_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_symlink_w');
  late final _archive_entry_symlink_w = _archive_entry_symlink_wPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_uid(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_uid(
      arg0,
    );
  }

  late final _archive_entry_uidPtr = _lookup<
          ffi.NativeFunction<la_int64_t Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_uid');
  late final _archive_entry_uid = _archive_entry_uidPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_uname(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_uname(
      arg0,
    );
  }

  late final _archive_entry_unamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_uname');
  late final _archive_entry_uname = _archive_entry_unamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.Char> archive_entry_uname_utf8(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_uname_utf8(
      arg0,
    );
  }

  late final _archive_entry_uname_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_uname_utf8');
  late final _archive_entry_uname_utf8 = _archive_entry_uname_utf8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>)>();

  ffi.Pointer<ffi.WChar> archive_entry_uname_w(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_uname_w(
      arg0,
    );
  }

  late final _archive_entry_uname_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_uname_w');
  late final _archive_entry_uname_w = _archive_entry_uname_wPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_is_data_encrypted(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_is_data_encrypted(
      arg0,
    );
  }

  late final _archive_entry_is_data_encryptedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_is_data_encrypted');
  late final _archive_entry_is_data_encrypted =
      _archive_entry_is_data_encryptedPtr
          .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_is_metadata_encrypted(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_is_metadata_encrypted(
      arg0,
    );
  }

  late final _archive_entry_is_metadata_encryptedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_is_metadata_encrypted');
  late final _archive_entry_is_metadata_encrypted =
      _archive_entry_is_metadata_encryptedPtr
          .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_is_encrypted(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_is_encrypted(
      arg0,
    );
  }

  late final _archive_entry_is_encryptedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_is_encrypted');
  late final _archive_entry_is_encrypted = _archive_entry_is_encryptedPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  /// Set fields in an archive_entry.
  ///
  /// Note: Before libarchive 2.4, there were 'set' and 'copy' versions
  /// of the string setters.  'copy' copied the actual string, 'set' just
  /// stored the pointer.  In libarchive 2.4 and later, strings are
  /// always copied.
  void archive_entry_set_atime(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_entry_set_atime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_set_atimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>, time_t,
              ffi.Long)>>('archive_entry_set_atime');
  late final _archive_entry_set_atime = _archive_entry_set_atimePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int, int)>();

  void archive_entry_unset_atime(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_unset_atime(
      arg0,
    );
  }

  late final _archive_entry_unset_atimePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_unset_atime');
  late final _archive_entry_unset_atime = _archive_entry_unset_atimePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_copy_bhfi(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<BY_HANDLE_FILE_INFORMATION> arg1,
  ) {
    return _archive_entry_copy_bhfi(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_bhfiPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<archive_entry>,
                  ffi.Pointer<BY_HANDLE_FILE_INFORMATION>)>>(
      'archive_entry_copy_bhfi');
  late final _archive_entry_copy_bhfi = _archive_entry_copy_bhfiPtr.asFunction<
      void Function(ffi.Pointer<archive_entry>,
          ffi.Pointer<BY_HANDLE_FILE_INFORMATION>)>();

  void archive_entry_set_birthtime(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_entry_set_birthtime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_set_birthtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>, time_t,
              ffi.Long)>>('archive_entry_set_birthtime');
  late final _archive_entry_set_birthtime = _archive_entry_set_birthtimePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int, int)>();

  void archive_entry_unset_birthtime(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_unset_birthtime(
      arg0,
    );
  }

  late final _archive_entry_unset_birthtimePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_unset_birthtime');
  late final _archive_entry_unset_birthtime = _archive_entry_unset_birthtimePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_set_ctime(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_entry_set_ctime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_set_ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>, time_t,
              ffi.Long)>>('archive_entry_set_ctime');
  late final _archive_entry_set_ctime = _archive_entry_set_ctimePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int, int)>();

  void archive_entry_unset_ctime(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_unset_ctime(
      arg0,
    );
  }

  late final _archive_entry_unset_ctimePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_unset_ctime');
  late final _archive_entry_unset_ctime = _archive_entry_unset_ctimePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_set_dev(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_dev(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_devPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<archive_entry>, dev_t)>>('archive_entry_set_dev');
  late final _archive_entry_set_dev = _archive_entry_set_devPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_devmajor(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_devmajor(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_devmajorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              dev_t)>>('archive_entry_set_devmajor');
  late final _archive_entry_set_devmajor = _archive_entry_set_devmajorPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_devminor(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_devminor(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_devminorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              dev_t)>>('archive_entry_set_devminor');
  late final _archive_entry_set_devminor = _archive_entry_set_devminorPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_filetype(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_filetype(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_filetypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.UnsignedInt)>>('archive_entry_set_filetype');
  late final _archive_entry_set_filetype = _archive_entry_set_filetypePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_fflags(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_entry_set_fflags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_set_fflagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>, ffi.UnsignedLong,
              ffi.UnsignedLong)>>('archive_entry_set_fflags');
  late final _archive_entry_set_fflags = _archive_entry_set_fflagsPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int, int)>();

  /// Returns pointer to start of first invalid token, or NULL if none. */
  /// /* Note that all recognized tokens are processed, regardless.
  ffi.Pointer<ffi.Char> archive_entry_copy_fflags_text(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_copy_fflags_text(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_fflags_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_copy_fflags_text');
  late final _archive_entry_copy_fflags_text =
      _archive_entry_copy_fflags_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.WChar> archive_entry_copy_fflags_text_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_entry_copy_fflags_text_w(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_fflags_text_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.WChar>)>>('archive_entry_copy_fflags_text_w');
  late final _archive_entry_copy_fflags_text_w =
      _archive_entry_copy_fflags_text_wPtr.asFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>)>();

  void archive_entry_set_gid(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_gid(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_gidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              la_int64_t)>>('archive_entry_set_gid');
  late final _archive_entry_set_gid = _archive_entry_set_gidPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_gname(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_gname(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_gnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_gname');
  late final _archive_entry_set_gname = _archive_entry_set_gnamePtr.asFunction<
      void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_gname_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_gname_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_gname_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_gname_utf8');
  late final _archive_entry_set_gname_utf8 =
      _archive_entry_set_gname_utf8Ptr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_gname(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_copy_gname(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_gnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_copy_gname');
  late final _archive_entry_copy_gname =
      _archive_entry_copy_gnamePtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_gname_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_entry_copy_gname_w(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_gname_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.WChar>)>>('archive_entry_copy_gname_w');
  late final _archive_entry_copy_gname_w =
      _archive_entry_copy_gname_wPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>)>();

  int archive_entry_update_gname_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_update_gname_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_update_gname_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_update_gname_utf8');
  late final _archive_entry_update_gname_utf8 =
      _archive_entry_update_gname_utf8Ptr.asFunction<
          int Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_hardlink(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_hardlink(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_hardlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_hardlink');
  late final _archive_entry_set_hardlink =
      _archive_entry_set_hardlinkPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_hardlink_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_hardlink_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_hardlink_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_hardlink_utf8');
  late final _archive_entry_set_hardlink_utf8 =
      _archive_entry_set_hardlink_utf8Ptr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_hardlink(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_copy_hardlink(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_hardlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_copy_hardlink');
  late final _archive_entry_copy_hardlink =
      _archive_entry_copy_hardlinkPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_hardlink_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_entry_copy_hardlink_w(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_hardlink_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.WChar>)>>('archive_entry_copy_hardlink_w');
  late final _archive_entry_copy_hardlink_w =
      _archive_entry_copy_hardlink_wPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>)>();

  int archive_entry_update_hardlink_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_update_hardlink_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_update_hardlink_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_update_hardlink_utf8');
  late final _archive_entry_update_hardlink_utf8 =
      _archive_entry_update_hardlink_utf8Ptr.asFunction<
          int Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_ino(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_ino(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_inoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              la_int64_t)>>('archive_entry_set_ino');
  late final _archive_entry_set_ino = _archive_entry_set_inoPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_ino64(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_ino64(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_ino64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              la_int64_t)>>('archive_entry_set_ino64');
  late final _archive_entry_set_ino64 = _archive_entry_set_ino64Ptr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_link(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_link(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_link');
  late final _archive_entry_set_link = _archive_entry_set_linkPtr.asFunction<
      void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_link_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_link_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_link_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_link_utf8');
  late final _archive_entry_set_link_utf8 =
      _archive_entry_set_link_utf8Ptr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_link(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_copy_link(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_copy_link');
  late final _archive_entry_copy_link = _archive_entry_copy_linkPtr.asFunction<
      void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_link_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_entry_copy_link_w(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_link_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.WChar>)>>('archive_entry_copy_link_w');
  late final _archive_entry_copy_link_w =
      _archive_entry_copy_link_wPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>)>();

  int archive_entry_update_link_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_update_link_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_update_link_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_update_link_utf8');
  late final _archive_entry_update_link_utf8 =
      _archive_entry_update_link_utf8Ptr.asFunction<
          int Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_mode(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_mode(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.UnsignedShort)>>('archive_entry_set_mode');
  late final _archive_entry_set_mode = _archive_entry_set_modePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_mtime(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_entry_set_mtime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_set_mtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>, time_t,
              ffi.Long)>>('archive_entry_set_mtime');
  late final _archive_entry_set_mtime = _archive_entry_set_mtimePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int, int)>();

  void archive_entry_unset_mtime(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_unset_mtime(
      arg0,
    );
  }

  late final _archive_entry_unset_mtimePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_unset_mtime');
  late final _archive_entry_unset_mtime = _archive_entry_unset_mtimePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_set_nlink(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_nlink(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_nlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.UnsignedInt)>>('archive_entry_set_nlink');
  late final _archive_entry_set_nlink = _archive_entry_set_nlinkPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_pathname(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_pathname(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_pathnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_pathname');
  late final _archive_entry_set_pathname =
      _archive_entry_set_pathnamePtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_pathname_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_pathname_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_pathname_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_pathname_utf8');
  late final _archive_entry_set_pathname_utf8 =
      _archive_entry_set_pathname_utf8Ptr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_pathname(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_copy_pathname(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_pathnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_copy_pathname');
  late final _archive_entry_copy_pathname =
      _archive_entry_copy_pathnamePtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_pathname_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_entry_copy_pathname_w(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_pathname_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.WChar>)>>('archive_entry_copy_pathname_w');
  late final _archive_entry_copy_pathname_w =
      _archive_entry_copy_pathname_wPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>)>();

  int archive_entry_update_pathname_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_update_pathname_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_update_pathname_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_update_pathname_utf8');
  late final _archive_entry_update_pathname_utf8 =
      _archive_entry_update_pathname_utf8Ptr.asFunction<
          int Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_perm(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_perm(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_permPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.UnsignedShort)>>('archive_entry_set_perm');
  late final _archive_entry_set_perm = _archive_entry_set_permPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_rdev(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_rdev(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_rdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<archive_entry>, dev_t)>>('archive_entry_set_rdev');
  late final _archive_entry_set_rdev = _archive_entry_set_rdevPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_rdevmajor(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_rdevmajor(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_rdevmajorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              dev_t)>>('archive_entry_set_rdevmajor');
  late final _archive_entry_set_rdevmajor = _archive_entry_set_rdevmajorPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_rdevminor(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_rdevminor(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_rdevminorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              dev_t)>>('archive_entry_set_rdevminor');
  late final _archive_entry_set_rdevminor = _archive_entry_set_rdevminorPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_size(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_size(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              la_int64_t)>>('archive_entry_set_size');
  late final _archive_entry_set_size = _archive_entry_set_sizePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_unset_size(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_unset_size(
      arg0,
    );
  }

  late final _archive_entry_unset_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_unset_size');
  late final _archive_entry_unset_size = _archive_entry_unset_sizePtr
      .asFunction<void Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_copy_sourcepath(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_copy_sourcepath(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_sourcepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_copy_sourcepath');
  late final _archive_entry_copy_sourcepath =
      _archive_entry_copy_sourcepathPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_sourcepath_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_entry_copy_sourcepath_w(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_sourcepath_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.WChar>)>>('archive_entry_copy_sourcepath_w');
  late final _archive_entry_copy_sourcepath_w =
      _archive_entry_copy_sourcepath_wPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>)>();

  void archive_entry_set_symlink(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_symlink(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_symlink');
  late final _archive_entry_set_symlink =
      _archive_entry_set_symlinkPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_symlink_type(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_symlink_type(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_symlink_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Int)>>('archive_entry_set_symlink_type');
  late final _archive_entry_set_symlink_type =
      _archive_entry_set_symlink_typePtr
          .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_symlink_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_symlink_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_symlink_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_symlink_utf8');
  late final _archive_entry_set_symlink_utf8 =
      _archive_entry_set_symlink_utf8Ptr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_symlink(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_copy_symlink(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_copy_symlink');
  late final _archive_entry_copy_symlink =
      _archive_entry_copy_symlinkPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_symlink_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_entry_copy_symlink_w(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_symlink_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.WChar>)>>('archive_entry_copy_symlink_w');
  late final _archive_entry_copy_symlink_w =
      _archive_entry_copy_symlink_wPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>)>();

  int archive_entry_update_symlink_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_update_symlink_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_update_symlink_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_update_symlink_utf8');
  late final _archive_entry_update_symlink_utf8 =
      _archive_entry_update_symlink_utf8Ptr.asFunction<
          int Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_uid(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_set_uid(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              la_int64_t)>>('archive_entry_set_uid');
  late final _archive_entry_set_uid = _archive_entry_set_uidPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_uname(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_uname(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_unamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_uname');
  late final _archive_entry_set_uname = _archive_entry_set_unamePtr.asFunction<
      void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_uname_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_set_uname_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_set_uname_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_set_uname_utf8');
  late final _archive_entry_set_uname_utf8 =
      _archive_entry_set_uname_utf8Ptr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_uname(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_copy_uname(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_unamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_copy_uname');
  late final _archive_entry_copy_uname =
      _archive_entry_copy_unamePtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_copy_uname_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_entry_copy_uname_w(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_uname_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.WChar>)>>('archive_entry_copy_uname_w');
  late final _archive_entry_copy_uname_w =
      _archive_entry_copy_uname_wPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>)>();

  int archive_entry_update_uname_utf8(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_entry_update_uname_utf8(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_update_uname_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>)>>('archive_entry_update_uname_utf8');
  late final _archive_entry_update_uname_utf8 =
      _archive_entry_update_uname_utf8Ptr.asFunction<
          int Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>)>();

  void archive_entry_set_is_data_encrypted(
    ffi.Pointer<archive_entry> arg0,
    int is_encrypted,
  ) {
    return _archive_entry_set_is_data_encrypted(
      arg0,
      is_encrypted,
    );
  }

  late final _archive_entry_set_is_data_encryptedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Char)>>('archive_entry_set_is_data_encrypted');
  late final _archive_entry_set_is_data_encrypted =
      _archive_entry_set_is_data_encryptedPtr
          .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  void archive_entry_set_is_metadata_encrypted(
    ffi.Pointer<archive_entry> arg0,
    int is_encrypted,
  ) {
    return _archive_entry_set_is_metadata_encrypted(
      arg0,
      is_encrypted,
    );
  }

  late final _archive_entry_set_is_metadata_encryptedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Char)>>('archive_entry_set_is_metadata_encrypted');
  late final _archive_entry_set_is_metadata_encrypted =
      _archive_entry_set_is_metadata_encryptedPtr
          .asFunction<void Function(ffi.Pointer<archive_entry>, int)>();

  /// Routines to bulk copy fields to/from a platform-native "struct
  /// stat."  Libarchive used to just store a struct stat inside of each
  /// archive_entry object, but this created issues when trying to
  /// manipulate archives on systems different than the ones they were
  /// created on.
  ///
  /// TODO: On Linux and other LFS systems, provide both stat32 and
  /// stat64 versions of these functions and all of the macro glue so
  /// that archive_entry_stat is magically defined to
  /// archive_entry_stat32 or archive_entry_stat64 as appropriate.
  ffi.Pointer<stat> archive_entry_stat(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_stat(
      arg0,
    );
  }

  late final _archive_entry_statPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stat> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_stat');
  late final _archive_entry_stat = _archive_entry_statPtr
      .asFunction<ffi.Pointer<stat> Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_copy_stat(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<stat> arg1,
  ) {
    return _archive_entry_copy_stat(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_copy_statPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<stat>)>>('archive_entry_copy_stat');
  late final _archive_entry_copy_stat = _archive_entry_copy_statPtr.asFunction<
      void Function(ffi.Pointer<archive_entry>, ffi.Pointer<stat>)>();

  /// Storage for Mac OS-specific AppleDouble metadata information.
  /// Apple-format tar files store a separate binary blob containing
  /// encoded metadata with ACL, extended attributes, etc.
  /// This provides a place to store that blob.
  ffi.Pointer<ffi.Void> archive_entry_mac_metadata(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _archive_entry_mac_metadata(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_mac_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Size>)>>('archive_entry_mac_metadata');
  late final _archive_entry_mac_metadata =
      _archive_entry_mac_metadataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Size>)>();

  void archive_entry_copy_mac_metadata(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _archive_entry_copy_mac_metadata(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_copy_mac_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('archive_entry_copy_mac_metadata');
  late final _archive_entry_copy_mac_metadata =
      _archive_entry_copy_mac_metadataPtr.asFunction<
          void Function(
              ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.UnsignedChar> archive_entry_digest(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_digest(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<archive_entry>, ffi.Int)>>('archive_entry_digest');
  late final _archive_entry_digest = _archive_entry_digestPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<archive_entry>, int)>();

  /// Set the ACL by clearing it and adding entries one at a time.
  /// Unlike the POSIX.1e ACL routines, you must specify the type
  /// (access/default) for each entry.  Internally, the ACL data is just
  /// a soup of entries.  API calls here allow you to retrieve just the
  /// entries of interest.  This design (which goes against the spirit of
  /// POSIX.1e) is useful for handling archive formats that combine
  /// default and access information in a single ACL list.
  void archive_entry_acl_clear(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_acl_clear(
      arg0,
    );
  }

  late final _archive_entry_acl_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_acl_clear');
  late final _archive_entry_acl_clear = _archive_entry_acl_clearPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_acl_add_entry(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
  ) {
    return _archive_entry_acl_add_entry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _archive_entry_acl_add_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive_entry>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('archive_entry_acl_add_entry');
  late final _archive_entry_acl_add_entry =
      _archive_entry_acl_add_entryPtr.asFunction<
          int Function(ffi.Pointer<archive_entry>, int, int, int, int,
              ffi.Pointer<ffi.Char>)>();

  int archive_entry_acl_add_entry_w(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.WChar> arg5,
  ) {
    return _archive_entry_acl_add_entry_w(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _archive_entry_acl_add_entry_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive_entry>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.WChar>)>>('archive_entry_acl_add_entry_w');
  late final _archive_entry_acl_add_entry_w =
      _archive_entry_acl_add_entry_wPtr.asFunction<
          int Function(ffi.Pointer<archive_entry>, int, int, int, int,
              ffi.Pointer<ffi.WChar>)>();

  /// To retrieve the ACL, first "reset", then repeatedly ask for the
  /// "next" entry.  The want_type parameter allows you to request only
  /// certain types of entries.
  int archive_entry_acl_reset(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_acl_reset(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_acl_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive_entry>, ffi.Int)>>('archive_entry_acl_reset');
  late final _archive_entry_acl_reset = _archive_entry_acl_resetPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>, int)>();

  int archive_entry_acl_next(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.Int> arg5,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg6,
  ) {
    return _archive_entry_acl_next(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _archive_entry_acl_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive_entry>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('archive_entry_acl_next');
  late final _archive_entry_acl_next = _archive_entry_acl_nextPtr.asFunction<
      int Function(
          ffi.Pointer<archive_entry>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.WChar> archive_entry_acl_to_text_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<la_ssize_t> arg1,
    int arg2,
  ) {
    return _archive_entry_acl_to_text_w(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_acl_to_text_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<archive_entry>,
              ffi.Pointer<la_ssize_t>,
              ffi.Int)>>('archive_entry_acl_to_text_w');
  late final _archive_entry_acl_to_text_w =
      _archive_entry_acl_to_text_wPtr.asFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<archive_entry>, ffi.Pointer<la_ssize_t>, int)>();

  ffi.Pointer<ffi.Char> archive_entry_acl_to_text(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<la_ssize_t> arg1,
    int arg2,
  ) {
    return _archive_entry_acl_to_text(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_acl_to_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>,
              ffi.Pointer<la_ssize_t>, ffi.Int)>>('archive_entry_acl_to_text');
  late final _archive_entry_acl_to_text =
      _archive_entry_acl_to_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>, ffi.Pointer<la_ssize_t>, int)>();

  int archive_entry_acl_from_text_w(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _archive_entry_acl_from_text_w(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_acl_from_text_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>,
              ffi.Int)>>('archive_entry_acl_from_text_w');
  late final _archive_entry_acl_from_text_w =
      _archive_entry_acl_from_text_wPtr.asFunction<
          int Function(
              ffi.Pointer<archive_entry>, ffi.Pointer<ffi.WChar>, int)>();

  int archive_entry_acl_from_text(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _archive_entry_acl_from_text(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_acl_from_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('archive_entry_acl_from_text');
  late final _archive_entry_acl_from_text =
      _archive_entry_acl_from_textPtr.asFunction<
          int Function(
              ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>, int)>();

  /// Deprecated functions
  ffi.Pointer<ffi.WChar> archive_entry_acl_text_w(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_acl_text_w(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_acl_text_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<archive_entry>,
              ffi.Int)>>('archive_entry_acl_text_w');
  late final _archive_entry_acl_text_w =
      _archive_entry_acl_text_wPtr.asFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<archive_entry>, int)>();

  ffi.Pointer<ffi.Char> archive_entry_acl_text(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_acl_text(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_acl_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive_entry>, ffi.Int)>>('archive_entry_acl_text');
  late final _archive_entry_acl_text = _archive_entry_acl_textPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive_entry>, int)>();

  /// Return bitmask of ACL types in an archive entry
  int archive_entry_acl_types(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_acl_types(
      arg0,
    );
  }

  late final _archive_entry_acl_typesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_acl_types');
  late final _archive_entry_acl_types = _archive_entry_acl_typesPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  /// Return a count of entries matching 'want_type'
  int archive_entry_acl_count(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
  ) {
    return _archive_entry_acl_count(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_acl_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive_entry>, ffi.Int)>>('archive_entry_acl_count');
  late final _archive_entry_acl_count = _archive_entry_acl_countPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>, int)>();

  ffi.Pointer<archive_acl> archive_entry_acl(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_acl(
      arg0,
    );
  }

  late final _archive_entry_aclPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<archive_acl> Function(
              ffi.Pointer<archive_entry>)>>('archive_entry_acl');
  late final _archive_entry_acl = _archive_entry_aclPtr.asFunction<
      ffi.Pointer<archive_acl> Function(ffi.Pointer<archive_entry>)>();

  /// extended attributes
  void archive_entry_xattr_clear(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_xattr_clear(
      arg0,
    );
  }

  late final _archive_entry_xattr_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_xattr_clear');
  late final _archive_entry_xattr_clear = _archive_entry_xattr_clearPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_xattr_add_entry(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _archive_entry_xattr_add_entry(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_entry_xattr_add_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('archive_entry_xattr_add_entry');
  late final _archive_entry_xattr_add_entry =
      _archive_entry_xattr_add_entryPtr.asFunction<
          void Function(ffi.Pointer<archive_entry>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, int)>();

  /// To retrieve the xattr list, first "reset", then repeatedly ask for the
  /// "next" entry.
  int archive_entry_xattr_count(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_xattr_count(
      arg0,
    );
  }

  late final _archive_entry_xattr_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_xattr_count');
  late final _archive_entry_xattr_count = _archive_entry_xattr_countPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_xattr_reset(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_xattr_reset(
      arg0,
    );
  }

  late final _archive_entry_xattr_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_xattr_reset');
  late final _archive_entry_xattr_reset = _archive_entry_xattr_resetPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_xattr_next(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _archive_entry_xattr_next(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_entry_xattr_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('archive_entry_xattr_next');
  late final _archive_entry_xattr_next =
      _archive_entry_xattr_nextPtr.asFunction<
          int Function(
              ffi.Pointer<archive_entry>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>();

  /// sparse
  void archive_entry_sparse_clear(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_sparse_clear(
      arg0,
    );
  }

  late final _archive_entry_sparse_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive_entry>)>>(
      'archive_entry_sparse_clear');
  late final _archive_entry_sparse_clear = _archive_entry_sparse_clearPtr
      .asFunction<void Function(ffi.Pointer<archive_entry>)>();

  void archive_entry_sparse_add_entry(
    ffi.Pointer<archive_entry> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_entry_sparse_add_entry(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_sparse_add_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry>, la_int64_t,
              la_int64_t)>>('archive_entry_sparse_add_entry');
  late final _archive_entry_sparse_add_entry =
      _archive_entry_sparse_add_entryPtr
          .asFunction<void Function(ffi.Pointer<archive_entry>, int, int)>();

  /// To retrieve the xattr list, first "reset", then repeatedly ask for the
  /// "next" entry.
  int archive_entry_sparse_count(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_sparse_count(
      arg0,
    );
  }

  late final _archive_entry_sparse_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_sparse_count');
  late final _archive_entry_sparse_count = _archive_entry_sparse_countPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_sparse_reset(
    ffi.Pointer<archive_entry> arg0,
  ) {
    return _archive_entry_sparse_reset(
      arg0,
    );
  }

  late final _archive_entry_sparse_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive_entry>)>>(
          'archive_entry_sparse_reset');
  late final _archive_entry_sparse_reset = _archive_entry_sparse_resetPtr
      .asFunction<int Function(ffi.Pointer<archive_entry>)>();

  int archive_entry_sparse_next(
    ffi.Pointer<archive_entry> arg0,
    ffi.Pointer<la_int64_t> arg1,
    ffi.Pointer<la_int64_t> arg2,
  ) {
    return _archive_entry_sparse_next(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_sparse_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive_entry>, ffi.Pointer<la_int64_t>,
              ffi.Pointer<la_int64_t>)>>('archive_entry_sparse_next');
  late final _archive_entry_sparse_next =
      _archive_entry_sparse_nextPtr.asFunction<
          int Function(ffi.Pointer<archive_entry>, ffi.Pointer<la_int64_t>,
              ffi.Pointer<la_int64_t>)>();

  /// There are three different strategies for marking hardlinks.
  /// The descriptions below name them after the best-known
  /// formats that rely on each strategy:
  ///
  /// "Old cpio" is the simplest, it always returns any entry unmodified.
  /// As far as I know, only cpio formats use this.  Old cpio archives
  /// store every link with the full body; the onus is on the dearchiver
  /// to detect and properly link the files as they are restored.
  /// "tar" is also pretty simple; it caches a copy the first time it sees
  /// any link.  Subsequent appearances are modified to be hardlink
  /// references to the first one without any body.  Used by all tar
  /// formats, although the newest tar formats permit the "old cpio" strategy
  /// as well.  This strategy is very simple for the dearchiver,
  /// and reasonably straightforward for the archiver.
  /// "new cpio" is trickier.  It stores the body only with the last
  /// occurrence.  The complication is that we might not
  /// see every link to a particular file in a single session, so
  /// there's no easy way to know when we've seen the last occurrence.
  /// The solution here is to queue one link until we see the next.
  /// At the end of the session, you can enumerate any remaining
  /// entries by calling archive_entry_linkify(NULL) and store those
  /// bodies.  If you have a file with three links l1, l2, and l3,
  /// you'll get the following behavior if you see all three links:
  /// linkify(l1) => NULL   (the resolver stores l1 internally)
  /// linkify(l2) => l1     (resolver stores l2, you write l1)
  /// linkify(l3) => l2, l3 (all links seen, you can write both).
  /// If you only see l1 and l2, you'll get this behavior:
  /// linkify(l1) => NULL
  /// linkify(l2) => l1
  /// linkify(NULL) => l2   (at end, you retrieve remaining links)
  /// As the name suggests, this strategy is used by newer cpio variants.
  /// It's noticeably more complex for the archiver, slightly more complex
  /// for the dearchiver than the tar strategy, but makes it straightforward
  /// to restore a file using any link by simply continuing to scan until
  /// you see a link that is stored with a body.  In contrast, the tar
  /// strategy requires you to rescan the archive from the beginning to
  /// correctly extract an arbitrary link.
  ffi.Pointer<archive_entry_linkresolver> archive_entry_linkresolver_new() {
    return _archive_entry_linkresolver_new();
  }

  late final _archive_entry_linkresolver_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<archive_entry_linkresolver>
              Function()>>('archive_entry_linkresolver_new');
  late final _archive_entry_linkresolver_new =
      _archive_entry_linkresolver_newPtr
          .asFunction<ffi.Pointer<archive_entry_linkresolver> Function()>();

  void archive_entry_linkresolver_set_strategy(
    ffi.Pointer<archive_entry_linkresolver> arg0,
    int arg1,
  ) {
    return _archive_entry_linkresolver_set_strategy(
      arg0,
      arg1,
    );
  }

  late final _archive_entry_linkresolver_set_strategyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive_entry_linkresolver>,
              ffi.Int)>>('archive_entry_linkresolver_set_strategy');
  late final _archive_entry_linkresolver_set_strategy =
      _archive_entry_linkresolver_set_strategyPtr.asFunction<
          void Function(ffi.Pointer<archive_entry_linkresolver>, int)>();

  void archive_entry_linkresolver_free(
    ffi.Pointer<archive_entry_linkresolver> arg0,
  ) {
    return _archive_entry_linkresolver_free(
      arg0,
    );
  }

  late final _archive_entry_linkresolver_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<archive_entry_linkresolver>)>>(
      'archive_entry_linkresolver_free');
  late final _archive_entry_linkresolver_free =
      _archive_entry_linkresolver_freePtr
          .asFunction<void Function(ffi.Pointer<archive_entry_linkresolver>)>();

  void archive_entry_linkify(
    ffi.Pointer<archive_entry_linkresolver> arg0,
    ffi.Pointer<ffi.Pointer<archive_entry>> arg1,
    ffi.Pointer<ffi.Pointer<archive_entry>> arg2,
  ) {
    return _archive_entry_linkify(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_entry_linkifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<archive_entry_linkresolver>,
                  ffi.Pointer<ffi.Pointer<archive_entry>>,
                  ffi.Pointer<ffi.Pointer<archive_entry>>)>>(
      'archive_entry_linkify');
  late final _archive_entry_linkify = _archive_entry_linkifyPtr.asFunction<
      void Function(
          ffi.Pointer<archive_entry_linkresolver>,
          ffi.Pointer<ffi.Pointer<archive_entry>>,
          ffi.Pointer<ffi.Pointer<archive_entry>>)>();

  ffi.Pointer<archive_entry> archive_entry_partial_links(
    ffi.Pointer<archive_entry_linkresolver> res,
    ffi.Pointer<ffi.UnsignedInt> links,
  ) {
    return _archive_entry_partial_links(
      res,
      links,
    );
  }

  late final _archive_entry_partial_linksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<archive_entry> Function(
              ffi.Pointer<archive_entry_linkresolver>,
              ffi.Pointer<ffi.UnsignedInt>)>>('archive_entry_partial_links');
  late final _archive_entry_partial_links =
      _archive_entry_partial_linksPtr.asFunction<
          ffi.Pointer<archive_entry> Function(
              ffi.Pointer<archive_entry_linkresolver>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  /// The version number is provided as both a macro and a function.
  /// The macro identifies the installed header; the function identifies
  /// the library version (which may not be the same if you're using a
  /// dynamically-linked version of the library).  Of course, if the
  /// header and library are very different, you should expect some
  /// strangeness.  Don't do that.
  int archive_version_number() {
    return _archive_version_number();
  }

  late final _archive_version_numberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('archive_version_number');
  late final _archive_version_number =
      _archive_version_numberPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> archive_version_string() {
    return _archive_version_string();
  }

  late final _archive_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'archive_version_string');
  late final _archive_version_string =
      _archive_version_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Detailed textual name/version of the library and its dependencies.
  /// This has the form:
  /// "libarchive x.y.z zlib/a.b.c liblzma/d.e.f ... etc ..."
  /// the list of libraries described here will vary depending on how
  /// libarchive was compiled.
  ffi.Pointer<ffi.Char> archive_version_details() {
    return _archive_version_details();
  }

  late final _archive_version_detailsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'archive_version_details');
  late final _archive_version_details = _archive_version_detailsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Returns NULL if libarchive was compiled without the associated library.
  /// Otherwise, returns the version number that libarchive was compiled
  /// against.
  ffi.Pointer<ffi.Char> archive_zlib_version() {
    return _archive_zlib_version();
  }

  late final _archive_zlib_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'archive_zlib_version');
  late final _archive_zlib_version =
      _archive_zlib_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> archive_liblzma_version() {
    return _archive_liblzma_version();
  }

  late final _archive_liblzma_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'archive_liblzma_version');
  late final _archive_liblzma_version = _archive_liblzma_versionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> archive_bzlib_version() {
    return _archive_bzlib_version();
  }

  late final _archive_bzlib_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'archive_bzlib_version');
  late final _archive_bzlib_version =
      _archive_bzlib_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> archive_liblz4_version() {
    return _archive_liblz4_version();
  }

  late final _archive_liblz4_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'archive_liblz4_version');
  late final _archive_liblz4_version =
      _archive_liblz4_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> archive_libzstd_version() {
    return _archive_libzstd_version();
  }

  late final _archive_libzstd_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'archive_libzstd_version');
  late final _archive_libzstd_version = _archive_libzstd_versionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// -
  /// Basic outline for reading an archive:
  /// 1) Ask archive_read_new for an archive reader object.
  /// 2) Update any global properties as appropriate.
  /// In particular, you'll certainly want to call appropriate
  /// archive_read_support_XXX functions.
  /// 3) Call archive_read_open_XXX to open the archive
  /// 4) Repeatedly call archive_read_next_header to get information about
  /// successive archive entries.  Call archive_read_data to extract
  /// data for entries of interest.
  /// 5) Call archive_read_free to end processing.
  ffi.Pointer<archive> archive_read_new() {
    return _archive_read_new();
  }

  late final _archive_read_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<archive> Function()>>(
          'archive_read_new');
  late final _archive_read_new =
      _archive_read_newPtr.asFunction<ffi.Pointer<archive> Function()>();

  int archive_read_support_compression_all(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_all(
      arg0,
    );
  }

  late final _archive_read_support_compression_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_all');
  late final _archive_read_support_compression_all =
      _archive_read_support_compression_allPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_compression_bzip2(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_bzip2(
      arg0,
    );
  }

  late final _archive_read_support_compression_bzip2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_bzip2');
  late final _archive_read_support_compression_bzip2 =
      _archive_read_support_compression_bzip2Ptr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_compression_compress(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_compress(
      arg0,
    );
  }

  late final _archive_read_support_compression_compressPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_compress');
  late final _archive_read_support_compression_compress =
      _archive_read_support_compression_compressPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_compression_gzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_gzip(
      arg0,
    );
  }

  late final _archive_read_support_compression_gzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_gzip');
  late final _archive_read_support_compression_gzip =
      _archive_read_support_compression_gzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_compression_lzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_lzip(
      arg0,
    );
  }

  late final _archive_read_support_compression_lzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_lzip');
  late final _archive_read_support_compression_lzip =
      _archive_read_support_compression_lzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_compression_lzma(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_lzma(
      arg0,
    );
  }

  late final _archive_read_support_compression_lzmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_lzma');
  late final _archive_read_support_compression_lzma =
      _archive_read_support_compression_lzmaPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_compression_none(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_none(
      arg0,
    );
  }

  late final _archive_read_support_compression_nonePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_none');
  late final _archive_read_support_compression_none =
      _archive_read_support_compression_nonePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_compression_program(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> command,
  ) {
    return _archive_read_support_compression_program(
      arg0,
      command,
    );
  }

  late final _archive_read_support_compression_programPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>>(
      'archive_read_support_compression_program');
  late final _archive_read_support_compression_program =
      _archive_read_support_compression_programPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_read_support_compression_program_signature(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _archive_read_support_compression_program_signature(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_read_support_compression_program_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('archive_read_support_compression_program_signature');
  late final _archive_read_support_compression_program_signature =
      _archive_read_support_compression_program_signaturePtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, int)>();

  int archive_read_support_compression_rpm(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_rpm(
      arg0,
    );
  }

  late final _archive_read_support_compression_rpmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_rpm');
  late final _archive_read_support_compression_rpm =
      _archive_read_support_compression_rpmPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_compression_uu(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_uu(
      arg0,
    );
  }

  late final _archive_read_support_compression_uuPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_uu');
  late final _archive_read_support_compression_uu =
      _archive_read_support_compression_uuPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_compression_xz(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_compression_xz(
      arg0,
    );
  }

  late final _archive_read_support_compression_xzPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_compression_xz');
  late final _archive_read_support_compression_xz =
      _archive_read_support_compression_xzPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_all(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_all(
      arg0,
    );
  }

  late final _archive_read_support_filter_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_all');
  late final _archive_read_support_filter_all =
      _archive_read_support_filter_allPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_by_code(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_read_support_filter_by_code(
      arg0,
      arg1,
    );
  }

  late final _archive_read_support_filter_by_codePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_read_support_filter_by_code');
  late final _archive_read_support_filter_by_code =
      _archive_read_support_filter_by_codePtr
          .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_read_support_filter_bzip2(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_bzip2(
      arg0,
    );
  }

  late final _archive_read_support_filter_bzip2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_bzip2');
  late final _archive_read_support_filter_bzip2 =
      _archive_read_support_filter_bzip2Ptr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_compress(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_compress(
      arg0,
    );
  }

  late final _archive_read_support_filter_compressPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_compress');
  late final _archive_read_support_filter_compress =
      _archive_read_support_filter_compressPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_gzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_gzip(
      arg0,
    );
  }

  late final _archive_read_support_filter_gzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_gzip');
  late final _archive_read_support_filter_gzip =
      _archive_read_support_filter_gzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_grzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_grzip(
      arg0,
    );
  }

  late final _archive_read_support_filter_grzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_grzip');
  late final _archive_read_support_filter_grzip =
      _archive_read_support_filter_grzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_lrzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_lrzip(
      arg0,
    );
  }

  late final _archive_read_support_filter_lrzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_lrzip');
  late final _archive_read_support_filter_lrzip =
      _archive_read_support_filter_lrzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_lz4(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_lz4(
      arg0,
    );
  }

  late final _archive_read_support_filter_lz4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_lz4');
  late final _archive_read_support_filter_lz4 =
      _archive_read_support_filter_lz4Ptr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_lzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_lzip(
      arg0,
    );
  }

  late final _archive_read_support_filter_lzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_lzip');
  late final _archive_read_support_filter_lzip =
      _archive_read_support_filter_lzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_lzma(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_lzma(
      arg0,
    );
  }

  late final _archive_read_support_filter_lzmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_lzma');
  late final _archive_read_support_filter_lzma =
      _archive_read_support_filter_lzmaPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_lzop(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_lzop(
      arg0,
    );
  }

  late final _archive_read_support_filter_lzopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_lzop');
  late final _archive_read_support_filter_lzop =
      _archive_read_support_filter_lzopPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_none(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_none(
      arg0,
    );
  }

  late final _archive_read_support_filter_nonePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_none');
  late final _archive_read_support_filter_none =
      _archive_read_support_filter_nonePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_program(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> command,
  ) {
    return _archive_read_support_filter_program(
      arg0,
      command,
    );
  }

  late final _archive_read_support_filter_programPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_read_support_filter_program');
  late final _archive_read_support_filter_program =
      _archive_read_support_filter_programPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_read_support_filter_program_signature(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _archive_read_support_filter_program_signature(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_read_support_filter_program_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('archive_read_support_filter_program_signature');
  late final _archive_read_support_filter_program_signature =
      _archive_read_support_filter_program_signaturePtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, int)>();

  int archive_read_support_filter_rpm(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_rpm(
      arg0,
    );
  }

  late final _archive_read_support_filter_rpmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_rpm');
  late final _archive_read_support_filter_rpm =
      _archive_read_support_filter_rpmPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_uu(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_uu(
      arg0,
    );
  }

  late final _archive_read_support_filter_uuPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_uu');
  late final _archive_read_support_filter_uu =
      _archive_read_support_filter_uuPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_xz(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_xz(
      arg0,
    );
  }

  late final _archive_read_support_filter_xzPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_xz');
  late final _archive_read_support_filter_xz =
      _archive_read_support_filter_xzPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_filter_zstd(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_filter_zstd(
      arg0,
    );
  }

  late final _archive_read_support_filter_zstdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_filter_zstd');
  late final _archive_read_support_filter_zstd =
      _archive_read_support_filter_zstdPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_7zip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_7zip(
      arg0,
    );
  }

  late final _archive_read_support_format_7zipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_7zip');
  late final _archive_read_support_format_7zip =
      _archive_read_support_format_7zipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_all(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_all(
      arg0,
    );
  }

  late final _archive_read_support_format_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_all');
  late final _archive_read_support_format_all =
      _archive_read_support_format_allPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_ar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_ar(
      arg0,
    );
  }

  late final _archive_read_support_format_arPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_ar');
  late final _archive_read_support_format_ar =
      _archive_read_support_format_arPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_by_code(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_read_support_format_by_code(
      arg0,
      arg1,
    );
  }

  late final _archive_read_support_format_by_codePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_read_support_format_by_code');
  late final _archive_read_support_format_by_code =
      _archive_read_support_format_by_codePtr
          .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_read_support_format_cab(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_cab(
      arg0,
    );
  }

  late final _archive_read_support_format_cabPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_cab');
  late final _archive_read_support_format_cab =
      _archive_read_support_format_cabPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_cpio(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_cpio(
      arg0,
    );
  }

  late final _archive_read_support_format_cpioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_cpio');
  late final _archive_read_support_format_cpio =
      _archive_read_support_format_cpioPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_empty(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_empty(
      arg0,
    );
  }

  late final _archive_read_support_format_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_empty');
  late final _archive_read_support_format_empty =
      _archive_read_support_format_emptyPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_gnutar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_gnutar(
      arg0,
    );
  }

  late final _archive_read_support_format_gnutarPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_gnutar');
  late final _archive_read_support_format_gnutar =
      _archive_read_support_format_gnutarPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_iso9660(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_iso9660(
      arg0,
    );
  }

  late final _archive_read_support_format_iso9660Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_iso9660');
  late final _archive_read_support_format_iso9660 =
      _archive_read_support_format_iso9660Ptr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_lha(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_lha(
      arg0,
    );
  }

  late final _archive_read_support_format_lhaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_lha');
  late final _archive_read_support_format_lha =
      _archive_read_support_format_lhaPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_mtree(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_mtree(
      arg0,
    );
  }

  late final _archive_read_support_format_mtreePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_mtree');
  late final _archive_read_support_format_mtree =
      _archive_read_support_format_mtreePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_rar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_rar(
      arg0,
    );
  }

  late final _archive_read_support_format_rarPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_rar');
  late final _archive_read_support_format_rar =
      _archive_read_support_format_rarPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_rar5(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_rar5(
      arg0,
    );
  }

  late final _archive_read_support_format_rar5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_rar5');
  late final _archive_read_support_format_rar5 =
      _archive_read_support_format_rar5Ptr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_raw(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_raw(
      arg0,
    );
  }

  late final _archive_read_support_format_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_raw');
  late final _archive_read_support_format_raw =
      _archive_read_support_format_rawPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_tar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_tar(
      arg0,
    );
  }

  late final _archive_read_support_format_tarPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_tar');
  late final _archive_read_support_format_tar =
      _archive_read_support_format_tarPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_warc(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_warc(
      arg0,
    );
  }

  late final _archive_read_support_format_warcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_warc');
  late final _archive_read_support_format_warc =
      _archive_read_support_format_warcPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_support_format_xar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_xar(
      arg0,
    );
  }

  late final _archive_read_support_format_xarPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_xar');
  late final _archive_read_support_format_xar =
      _archive_read_support_format_xarPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// archive_read_support_format_zip() enables both streamable and seekable
  /// zip readers.
  int archive_read_support_format_zip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_zip(
      arg0,
    );
  }

  late final _archive_read_support_format_zipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_zip');
  late final _archive_read_support_format_zip =
      _archive_read_support_format_zipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Reads Zip archives as stream from beginning to end.  Doesn't
  /// correctly handle SFX ZIP files or ZIP archives that have been modified
  /// in-place.
  int archive_read_support_format_zip_streamable(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_zip_streamable(
      arg0,
    );
  }

  late final _archive_read_support_format_zip_streamablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_zip_streamable');
  late final _archive_read_support_format_zip_streamable =
      _archive_read_support_format_zip_streamablePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Reads starting from central directory; requires seekable input.
  int archive_read_support_format_zip_seekable(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_support_format_zip_seekable(
      arg0,
    );
  }

  late final _archive_read_support_format_zip_seekablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_support_format_zip_seekable');
  late final _archive_read_support_format_zip_seekable =
      _archive_read_support_format_zip_seekablePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Functions to manually set the format and filters to be used. This is
  /// useful to bypass the bidding process when the format and filters to use
  /// is known in advance.
  int archive_read_set_format(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_read_set_format(
      arg0,
      arg1,
    );
  }

  late final _archive_read_set_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_read_set_format');
  late final _archive_read_set_format = _archive_read_set_formatPtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_read_append_filter(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_read_append_filter(
      arg0,
      arg1,
    );
  }

  late final _archive_read_append_filterPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_read_append_filter');
  late final _archive_read_append_filter = _archive_read_append_filterPtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_read_append_filter_program(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_read_append_filter_program(
      arg0,
      arg1,
    );
  }

  late final _archive_read_append_filter_programPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_read_append_filter_program');
  late final _archive_read_append_filter_program =
      _archive_read_append_filter_programPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_read_append_filter_program_signature(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _archive_read_append_filter_program_signature(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_read_append_filter_program_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('archive_read_append_filter_program_signature');
  late final _archive_read_append_filter_program_signature =
      _archive_read_append_filter_program_signaturePtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, int)>();

  /// Set various callbacks.
  int archive_read_set_open_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_open_callback> arg1,
  ) {
    return _archive_read_set_open_callback(
      arg0,
      arg1,
    );
  }

  late final _archive_read_set_open_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>, ffi.Pointer<archive_open_callback>)>>(
      'archive_read_set_open_callback');
  late final _archive_read_set_open_callback =
      _archive_read_set_open_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<archive_open_callback>)>();

  int archive_read_set_read_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_read_callback> arg1,
  ) {
    return _archive_read_set_read_callback(
      arg0,
      arg1,
    );
  }

  late final _archive_read_set_read_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>, ffi.Pointer<archive_read_callback>)>>(
      'archive_read_set_read_callback');
  late final _archive_read_set_read_callback =
      _archive_read_set_read_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<archive_read_callback>)>();

  int archive_read_set_seek_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_seek_callback> arg1,
  ) {
    return _archive_read_set_seek_callback(
      arg0,
      arg1,
    );
  }

  late final _archive_read_set_seek_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>, ffi.Pointer<archive_seek_callback>)>>(
      'archive_read_set_seek_callback');
  late final _archive_read_set_seek_callback =
      _archive_read_set_seek_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<archive_seek_callback>)>();

  int archive_read_set_skip_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_skip_callback> arg1,
  ) {
    return _archive_read_set_skip_callback(
      arg0,
      arg1,
    );
  }

  late final _archive_read_set_skip_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>, ffi.Pointer<archive_skip_callback>)>>(
      'archive_read_set_skip_callback');
  late final _archive_read_set_skip_callback =
      _archive_read_set_skip_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<archive_skip_callback>)>();

  int archive_read_set_close_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_close_callback> arg1,
  ) {
    return _archive_read_set_close_callback(
      arg0,
      arg1,
    );
  }

  late final _archive_read_set_close_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>, ffi.Pointer<archive_close_callback>)>>(
      'archive_read_set_close_callback');
  late final _archive_read_set_close_callback =
      _archive_read_set_close_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<archive_close_callback>)>();

  /// Callback used to switch between one data object to the next
  int archive_read_set_switch_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_switch_callback> arg1,
  ) {
    return _archive_read_set_switch_callback(
      arg0,
      arg1,
    );
  }

  late final _archive_read_set_switch_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>, ffi.Pointer<archive_switch_callback>)>>(
      'archive_read_set_switch_callback');
  late final _archive_read_set_switch_callback =
      _archive_read_set_switch_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<archive_switch_callback>)>();

  /// This sets the first data object.
  int archive_read_set_callback_data(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _archive_read_set_callback_data(
      arg0,
      arg1,
    );
  }

  late final _archive_read_set_callback_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>)>>('archive_read_set_callback_data');
  late final _archive_read_set_callback_data =
      _archive_read_set_callback_dataPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>)>();

  /// This sets data object at specified index
  int archive_read_set_callback_data2(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _archive_read_set_callback_data2(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_read_set_callback_data2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('archive_read_set_callback_data2');
  late final _archive_read_set_callback_data2 =
      _archive_read_set_callback_data2Ptr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, int)>();

  /// This adds a data object at the specified index.
  int archive_read_add_callback_data(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _archive_read_add_callback_data(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_read_add_callback_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('archive_read_add_callback_data');
  late final _archive_read_add_callback_data =
      _archive_read_add_callback_dataPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, int)>();

  /// This appends a data object to the end of list
  int archive_read_append_callback_data(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _archive_read_append_callback_data(
      arg0,
      arg1,
    );
  }

  late final _archive_read_append_callback_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>)>>('archive_read_append_callback_data');
  late final _archive_read_append_callback_data =
      _archive_read_append_callback_dataPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>)>();

  /// This prepends a data object to the beginning of list
  int archive_read_prepend_callback_data(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _archive_read_prepend_callback_data(
      arg0,
      arg1,
    );
  }

  late final _archive_read_prepend_callback_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>)>>('archive_read_prepend_callback_data');
  late final _archive_read_prepend_callback_data =
      _archive_read_prepend_callback_dataPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>)>();

  /// Opening freezes the callbacks.
  int archive_read_open1(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_open1(
      arg0,
    );
  }

  late final _archive_read_open1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_open1');
  late final _archive_read_open1 =
      _archive_read_open1Ptr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// Convenience wrappers around the above.
  int archive_read_open(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> _client_data,
    ffi.Pointer<archive_open_callback> arg2,
    ffi.Pointer<archive_read_callback> arg3,
    ffi.Pointer<archive_close_callback> arg4,
  ) {
    return _archive_read_open(
      arg0,
      _client_data,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _archive_read_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<archive_open_callback>,
              ffi.Pointer<archive_read_callback>,
              ffi.Pointer<archive_close_callback>)>>('archive_read_open');
  late final _archive_read_open = _archive_read_openPtr.asFunction<
      int Function(
          ffi.Pointer<archive>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<archive_open_callback>,
          ffi.Pointer<archive_read_callback>,
          ffi.Pointer<archive_close_callback>)>();

  int archive_read_open2(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> _client_data,
    ffi.Pointer<archive_open_callback> arg2,
    ffi.Pointer<archive_read_callback> arg3,
    ffi.Pointer<archive_skip_callback> arg4,
    ffi.Pointer<archive_close_callback> arg5,
  ) {
    return _archive_read_open2(
      arg0,
      _client_data,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _archive_read_open2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<archive_open_callback>,
              ffi.Pointer<archive_read_callback>,
              ffi.Pointer<archive_skip_callback>,
              ffi.Pointer<archive_close_callback>)>>('archive_read_open2');
  late final _archive_read_open2 = _archive_read_open2Ptr.asFunction<
      int Function(
          ffi.Pointer<archive>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<archive_open_callback>,
          ffi.Pointer<archive_read_callback>,
          ffi.Pointer<archive_skip_callback>,
          ffi.Pointer<archive_close_callback>)>();

  /// A variety of shortcuts that invoke archive_read_open() with
  /// canned callbacks suitable for common situations.  The ones that
  /// accept a block size handle tape blocking correctly.
  /// /
  /// /* Use this if you know the filename.  Note: NULL indicates stdin.
  int archive_read_open_filename(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> _filename,
    int _block_size,
  ) {
    return _archive_read_open_filename(
      arg0,
      _filename,
      _block_size,
    );
  }

  late final _archive_read_open_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('archive_read_open_filename');
  late final _archive_read_open_filename =
      _archive_read_open_filenamePtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>, int)>();

  /// Use this for reading multivolume files by filenames.
  /// NOTE: Must be NULL terminated. Sorting is NOT done.
  int archive_read_open_filenames(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _filenames,
    int _block_size,
  ) {
    return _archive_read_open_filenames(
      arg0,
      _filenames,
      _block_size,
    );
  }

  late final _archive_read_open_filenamesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size)>>('archive_read_open_filenames');
  late final _archive_read_open_filenames =
      _archive_read_open_filenamesPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int archive_read_open_filename_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.WChar> _filename,
    int _block_size,
  ) {
    return _archive_read_open_filename_w(
      arg0,
      _filename,
      _block_size,
    );
  }

  late final _archive_read_open_filename_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('archive_read_open_filename_w');
  late final _archive_read_open_filename_w =
      _archive_read_open_filename_wPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>, int)>();

  /// archive_read_open_file() is a deprecated synonym for ..._open_filename().
  int archive_read_open_file(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> _filename,
    int _block_size,
  ) {
    return _archive_read_open_file(
      arg0,
      _filename,
      _block_size,
    );
  }

  late final _archive_read_open_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('archive_read_open_file');
  late final _archive_read_open_file = _archive_read_open_filePtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>, int)>();

  /// Read an archive that's stored in memory.
  int archive_read_open_memory(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> buff,
    int size,
  ) {
    return _archive_read_open_memory(
      arg0,
      buff,
      size,
    );
  }

  late final _archive_read_open_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('archive_read_open_memory');
  late final _archive_read_open_memory =
      _archive_read_open_memoryPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, int)>();

  /// A more involved version that is only used for internal testing.
  int archive_read_open_memory2(
    ffi.Pointer<archive> a,
    ffi.Pointer<ffi.Void> buff,
    int size,
    int read_size,
  ) {
    return _archive_read_open_memory2(
      a,
      buff,
      size,
      read_size,
    );
  }

  late final _archive_read_open_memory2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Size)>>('archive_read_open_memory2');
  late final _archive_read_open_memory2 =
      _archive_read_open_memory2Ptr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, int, int)>();

  /// Read an archive that's already open, using the file descriptor.
  int archive_read_open_fd(
    ffi.Pointer<archive> arg0,
    int _fd,
    int _block_size,
  ) {
    return _archive_read_open_fd(
      arg0,
      _fd,
      _block_size,
    );
  }

  late final _archive_read_open_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Int,
              ffi.Size)>>('archive_read_open_fd');
  late final _archive_read_open_fd = _archive_read_open_fdPtr
      .asFunction<int Function(ffi.Pointer<archive>, int, int)>();

  /// Read an archive that's already open, using a FILE *. */
  /// /* Note: DO NOT use this with tape drives.
  int archive_read_open_FILE(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<FILE> _file,
  ) {
    return _archive_read_open_FILE(
      arg0,
      _file,
    );
  }

  late final _archive_read_open_FILEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<FILE>)>>('archive_read_open_FILE');
  late final _archive_read_open_FILE = _archive_read_open_FILEPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<FILE>)>();

  /// Parses and returns next entry header.
  int archive_read_next_header(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Pointer<archive_entry>> arg1,
  ) {
    return _archive_read_next_header(
      arg0,
      arg1,
    );
  }

  late final _archive_read_next_headerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<archive>,
                  ffi.Pointer<ffi.Pointer<archive_entry>>)>>(
      'archive_read_next_header');
  late final _archive_read_next_header =
      _archive_read_next_headerPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<ffi.Pointer<archive_entry>>)>();

  /// Parses and returns next entry header using the archive_entry passed in
  int archive_read_next_header2(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_entry> arg1,
  ) {
    return _archive_read_next_header2(
      arg0,
      arg1,
    );
  }

  late final _archive_read_next_header2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<archive_entry>)>>('archive_read_next_header2');
  late final _archive_read_next_header2 =
      _archive_read_next_header2Ptr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>)>();

  /// Retrieve the byte offset in UNCOMPRESSED data where last-read
  /// header started.
  int archive_read_header_position(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_header_position(
      arg0,
    );
  }

  late final _archive_read_header_positionPtr =
      _lookup<ffi.NativeFunction<la_int64_t1 Function(ffi.Pointer<archive>)>>(
          'archive_read_header_position');
  late final _archive_read_header_position = _archive_read_header_positionPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Returns 1 if the archive contains at least one encrypted entry.
  /// If the archive format not support encryption at all
  /// ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED is returned.
  /// If for any other reason (e.g. not enough data read so far)
  /// we cannot say whether there are encrypted entries, then
  /// ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW is returned.
  /// In general, this function will return values below zero when the
  /// reader is uncertain or totally incapable of encryption support.
  /// When this function returns 0 you can be sure that the reader
  /// supports encryption detection but no encrypted entries have
  /// been found yet.
  ///
  /// NOTE: If the metadata/header of an archive is also encrypted, you
  /// cannot rely on the number of encrypted entries. That is why this
  /// function does not return the number of encrypted entries but#
  /// just shows that there are some.
  int archive_read_has_encrypted_entries(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_has_encrypted_entries(
      arg0,
    );
  }

  late final _archive_read_has_encrypted_entriesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_has_encrypted_entries');
  late final _archive_read_has_encrypted_entries =
      _archive_read_has_encrypted_entriesPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Returns a bitmask of capabilities that are supported by the archive format reader.
  /// If the reader has no special capabilities, ARCHIVE_READ_FORMAT_CAPS_NONE is returned.
  int archive_read_format_capabilities(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_format_capabilities(
      arg0,
    );
  }

  late final _archive_read_format_capabilitiesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_format_capabilities');
  late final _archive_read_format_capabilities =
      _archive_read_format_capabilitiesPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Read data from the body of an entry.  Similar to read(2).
  int archive_read_data(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _archive_read_data(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_read_dataPtr = _lookup<
      ffi.NativeFunction<
          la_ssize_t1 Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('archive_read_data');
  late final _archive_read_data = _archive_read_dataPtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, int)>();

  /// Seek within the body of an entry.  Similar to lseek(2).
  int archive_seek_data(
    ffi.Pointer<archive> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_seek_data(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_seek_dataPtr = _lookup<
      ffi.NativeFunction<
          la_int64_t1 Function(ffi.Pointer<archive>, la_int64_t1,
              ffi.Int)>>('archive_seek_data');
  late final _archive_seek_data = _archive_seek_dataPtr
      .asFunction<int Function(ffi.Pointer<archive>, int, int)>();

  /// A zero-copy version of archive_read_data that also exposes the file offset
  /// of each returned block.  Note that the client has no way to specify
  /// the desired size of the block.  The API does guarantee that offsets will
  /// be strictly increasing and that returned blocks will not overlap.
  int archive_read_data_block(
    ffi.Pointer<archive> a,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buff,
    ffi.Pointer<ffi.Size> size,
    ffi.Pointer<la_int64_t1> offset,
  ) {
    return _archive_read_data_block(
      a,
      buff,
      size,
      offset,
    );
  }

  late final _archive_read_data_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<la_int64_t1>)>>('archive_read_data_block');
  late final _archive_read_data_block = _archive_read_data_blockPtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<la_int64_t1>)>();

  /// -
  /// Some convenience functions that are built on archive_read_data:
  /// 'skip': skips entire entry
  /// 'into_buffer': writes data into memory buffer that you provide
  /// 'into_fd': writes data to specified filedes
  int archive_read_data_skip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_data_skip(
      arg0,
    );
  }

  late final _archive_read_data_skipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_data_skip');
  late final _archive_read_data_skip = _archive_read_data_skipPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_data_into_fd(
    ffi.Pointer<archive> arg0,
    int fd,
  ) {
    return _archive_read_data_into_fd(
      arg0,
      fd,
    );
  }

  late final _archive_read_data_into_fdPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_read_data_into_fd');
  late final _archive_read_data_into_fd = _archive_read_data_into_fdPtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  /// Set read options.
  /// /
  /// /* Apply option to the format only.
  int archive_read_set_format_option(
    ffi.Pointer<archive> _a,
    ffi.Pointer<ffi.Char> m,
    ffi.Pointer<ffi.Char> o,
    ffi.Pointer<ffi.Char> v,
  ) {
    return _archive_read_set_format_option(
      _a,
      m,
      o,
      v,
    );
  }

  late final _archive_read_set_format_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('archive_read_set_format_option');
  late final _archive_read_set_format_option =
      _archive_read_set_format_optionPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Apply option to the filter only.
  int archive_read_set_filter_option(
    ffi.Pointer<archive> _a,
    ffi.Pointer<ffi.Char> m,
    ffi.Pointer<ffi.Char> o,
    ffi.Pointer<ffi.Char> v,
  ) {
    return _archive_read_set_filter_option(
      _a,
      m,
      o,
      v,
    );
  }

  late final _archive_read_set_filter_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('archive_read_set_filter_option');
  late final _archive_read_set_filter_option =
      _archive_read_set_filter_optionPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Apply option to both the format and the filter.
  int archive_read_set_option(
    ffi.Pointer<archive> _a,
    ffi.Pointer<ffi.Char> m,
    ffi.Pointer<ffi.Char> o,
    ffi.Pointer<ffi.Char> v,
  ) {
    return _archive_read_set_option(
      _a,
      m,
      o,
      v,
    );
  }

  late final _archive_read_set_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('archive_read_set_option');
  late final _archive_read_set_option = _archive_read_set_optionPtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Apply option string to both the format and the filter.
  int archive_read_set_options(
    ffi.Pointer<archive> _a,
    ffi.Pointer<ffi.Char> opts,
  ) {
    return _archive_read_set_options(
      _a,
      opts,
    );
  }

  late final _archive_read_set_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_read_set_options');
  late final _archive_read_set_options = _archive_read_set_optionsPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  /// Add a decryption passphrase.
  int archive_read_add_passphrase(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_read_add_passphrase(
      arg0,
      arg1,
    );
  }

  late final _archive_read_add_passphrasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_read_add_passphrase');
  late final _archive_read_add_passphrase = _archive_read_add_passphrasePtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_read_set_passphrase_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> client_data,
    ffi.Pointer<archive_passphrase_callback> arg2,
  ) {
    return _archive_read_set_passphrase_callback(
      arg0,
      client_data,
      arg2,
    );
  }

  late final _archive_read_set_passphrase_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<archive_passphrase_callback>)>>(
      'archive_read_set_passphrase_callback');
  late final _archive_read_set_passphrase_callback =
      _archive_read_set_passphrase_callbackPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<archive_passphrase_callback>)>();

  int archive_read_extract(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_entry> arg1,
    int flags,
  ) {
    return _archive_read_extract(
      arg0,
      arg1,
      flags,
    );
  }

  late final _archive_read_extractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>,
              ffi.Int)>>('archive_read_extract');
  late final _archive_read_extract = _archive_read_extractPtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>, int)>();

  int archive_read_extract2(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_entry> arg1,
    ffi.Pointer<archive> arg2,
  ) {
    return _archive_read_extract2(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_read_extract2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>,
              ffi.Pointer<archive>)>>('archive_read_extract2');
  late final _archive_read_extract2 = _archive_read_extract2Ptr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>,
          ffi.Pointer<archive>)>();

  void archive_read_extract_set_progress_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        _progress_func,
    ffi.Pointer<ffi.Void> _user_data,
  ) {
    return _archive_read_extract_set_progress_callback(
      arg0,
      _progress_func,
      _user_data,
    );
  }

  late final _archive_read_extract_set_progress_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<archive>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.Void>)>>('archive_read_extract_set_progress_callback');
  late final _archive_read_extract_set_progress_callback =
      _archive_read_extract_set_progress_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<archive>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  /// Record the dev/ino of a file that will not be written.  This is
  /// generally set to the dev/ino of the archive being read.
  void archive_read_extract_set_skip_file(
    ffi.Pointer<archive> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_read_extract_set_skip_file(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_read_extract_set_skip_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive>, la_int64_t1,
              la_int64_t1)>>('archive_read_extract_set_skip_file');
  late final _archive_read_extract_set_skip_file =
      _archive_read_extract_set_skip_filePtr
          .asFunction<void Function(ffi.Pointer<archive>, int, int)>();

  /// Close the file and release most resources.
  int archive_read_close(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_close(
      arg0,
    );
  }

  late final _archive_read_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_close');
  late final _archive_read_close =
      _archive_read_closePtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// Release all resources and destroy the object. */
  /// /* Note that archive_read_free will call archive_read_close for you.
  int archive_read_free(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_free(
      arg0,
    );
  }

  late final _archive_read_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_free');
  late final _archive_read_free =
      _archive_read_freePtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// Synonym for archive_read_free() for backwards compatibility.
  int archive_read_finish(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_finish(
      arg0,
    );
  }

  late final _archive_read_finishPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_finish');
  late final _archive_read_finish =
      _archive_read_finishPtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// -
  /// To create an archive:
  /// 1) Ask archive_write_new for an archive writer object.
  /// 2) Set any global properties.  In particular, you should set
  /// the compression and format to use.
  /// 3) Call archive_write_open to open the file (most people
  /// will use archive_write_open_file or archive_write_open_fd,
  /// which provide convenient canned I/O callbacks for you).
  /// 4) For each entry:
  /// - construct an appropriate struct archive_entry structure
  /// - archive_write_header to write the header
  /// - archive_write_data to write the entry data
  /// 5) archive_write_close to close the output
  /// 6) archive_write_free to cleanup the writer and release resources
  ffi.Pointer<archive> archive_write_new() {
    return _archive_write_new();
  }

  late final _archive_write_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<archive> Function()>>(
          'archive_write_new');
  late final _archive_write_new =
      _archive_write_newPtr.asFunction<ffi.Pointer<archive> Function()>();

  int archive_write_set_bytes_per_block(
    ffi.Pointer<archive> arg0,
    int bytes_per_block,
  ) {
    return _archive_write_set_bytes_per_block(
      arg0,
      bytes_per_block,
    );
  }

  late final _archive_write_set_bytes_per_blockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_write_set_bytes_per_block');
  late final _archive_write_set_bytes_per_block =
      _archive_write_set_bytes_per_blockPtr
          .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_write_get_bytes_per_block(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_get_bytes_per_block(
      arg0,
    );
  }

  late final _archive_write_get_bytes_per_blockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_get_bytes_per_block');
  late final _archive_write_get_bytes_per_block =
      _archive_write_get_bytes_per_blockPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// XXX This is badly misnamed; suggestions appreciated. XXX
  int archive_write_set_bytes_in_last_block(
    ffi.Pointer<archive> arg0,
    int bytes_in_last_block,
  ) {
    return _archive_write_set_bytes_in_last_block(
      arg0,
      bytes_in_last_block,
    );
  }

  late final _archive_write_set_bytes_in_last_blockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_write_set_bytes_in_last_block');
  late final _archive_write_set_bytes_in_last_block =
      _archive_write_set_bytes_in_last_blockPtr
          .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_write_get_bytes_in_last_block(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_get_bytes_in_last_block(
      arg0,
    );
  }

  late final _archive_write_get_bytes_in_last_blockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_get_bytes_in_last_block');
  late final _archive_write_get_bytes_in_last_block =
      _archive_write_get_bytes_in_last_blockPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// The dev/ino of a file that won't be archived.  This is used
  /// to avoid recursively adding an archive to itself.
  int archive_write_set_skip_file(
    ffi.Pointer<archive> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_write_set_skip_file(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_write_set_skip_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, la_int64_t1,
              la_int64_t1)>>('archive_write_set_skip_file');
  late final _archive_write_set_skip_file = _archive_write_set_skip_filePtr
      .asFunction<int Function(ffi.Pointer<archive>, int, int)>();

  int archive_write_set_compression_bzip2(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_compression_bzip2(
      arg0,
    );
  }

  late final _archive_write_set_compression_bzip2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_compression_bzip2');
  late final _archive_write_set_compression_bzip2 =
      _archive_write_set_compression_bzip2Ptr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_compression_compress(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_compression_compress(
      arg0,
    );
  }

  late final _archive_write_set_compression_compressPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_compression_compress');
  late final _archive_write_set_compression_compress =
      _archive_write_set_compression_compressPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_compression_gzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_compression_gzip(
      arg0,
    );
  }

  late final _archive_write_set_compression_gzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_compression_gzip');
  late final _archive_write_set_compression_gzip =
      _archive_write_set_compression_gzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_compression_lzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_compression_lzip(
      arg0,
    );
  }

  late final _archive_write_set_compression_lzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_compression_lzip');
  late final _archive_write_set_compression_lzip =
      _archive_write_set_compression_lzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_compression_lzma(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_compression_lzma(
      arg0,
    );
  }

  late final _archive_write_set_compression_lzmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_compression_lzma');
  late final _archive_write_set_compression_lzma =
      _archive_write_set_compression_lzmaPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_compression_none(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_compression_none(
      arg0,
    );
  }

  late final _archive_write_set_compression_nonePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_compression_none');
  late final _archive_write_set_compression_none =
      _archive_write_set_compression_nonePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_compression_program(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> cmd,
  ) {
    return _archive_write_set_compression_program(
      arg0,
      cmd,
    );
  }

  late final _archive_write_set_compression_programPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_write_set_compression_program');
  late final _archive_write_set_compression_program =
      _archive_write_set_compression_programPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_write_set_compression_xz(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_compression_xz(
      arg0,
    );
  }

  late final _archive_write_set_compression_xzPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_compression_xz');
  late final _archive_write_set_compression_xz =
      _archive_write_set_compression_xzPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// A convenience function to set the filter based on the code.
  int archive_write_add_filter(
    ffi.Pointer<archive> arg0,
    int filter_code,
  ) {
    return _archive_write_add_filter(
      arg0,
      filter_code,
    );
  }

  late final _archive_write_add_filterPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_write_add_filter');
  late final _archive_write_add_filter = _archive_write_add_filterPtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_write_add_filter_by_name(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _archive_write_add_filter_by_name(
      arg0,
      name,
    );
  }

  late final _archive_write_add_filter_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_write_add_filter_by_name');
  late final _archive_write_add_filter_by_name =
      _archive_write_add_filter_by_namePtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_write_add_filter_b64encode(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_b64encode(
      arg0,
    );
  }

  late final _archive_write_add_filter_b64encodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_b64encode');
  late final _archive_write_add_filter_b64encode =
      _archive_write_add_filter_b64encodePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_bzip2(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_bzip2(
      arg0,
    );
  }

  late final _archive_write_add_filter_bzip2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_bzip2');
  late final _archive_write_add_filter_bzip2 =
      _archive_write_add_filter_bzip2Ptr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_compress(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_compress(
      arg0,
    );
  }

  late final _archive_write_add_filter_compressPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_compress');
  late final _archive_write_add_filter_compress =
      _archive_write_add_filter_compressPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_grzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_grzip(
      arg0,
    );
  }

  late final _archive_write_add_filter_grzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_grzip');
  late final _archive_write_add_filter_grzip =
      _archive_write_add_filter_grzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_gzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_gzip(
      arg0,
    );
  }

  late final _archive_write_add_filter_gzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_gzip');
  late final _archive_write_add_filter_gzip = _archive_write_add_filter_gzipPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_lrzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_lrzip(
      arg0,
    );
  }

  late final _archive_write_add_filter_lrzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_lrzip');
  late final _archive_write_add_filter_lrzip =
      _archive_write_add_filter_lrzipPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_lz4(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_lz4(
      arg0,
    );
  }

  late final _archive_write_add_filter_lz4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_lz4');
  late final _archive_write_add_filter_lz4 = _archive_write_add_filter_lz4Ptr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_lzip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_lzip(
      arg0,
    );
  }

  late final _archive_write_add_filter_lzipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_lzip');
  late final _archive_write_add_filter_lzip = _archive_write_add_filter_lzipPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_lzma(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_lzma(
      arg0,
    );
  }

  late final _archive_write_add_filter_lzmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_lzma');
  late final _archive_write_add_filter_lzma = _archive_write_add_filter_lzmaPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_lzop(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_lzop(
      arg0,
    );
  }

  late final _archive_write_add_filter_lzopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_lzop');
  late final _archive_write_add_filter_lzop = _archive_write_add_filter_lzopPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_none(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_none(
      arg0,
    );
  }

  late final _archive_write_add_filter_nonePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_none');
  late final _archive_write_add_filter_none = _archive_write_add_filter_nonePtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_program(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> cmd,
  ) {
    return _archive_write_add_filter_program(
      arg0,
      cmd,
    );
  }

  late final _archive_write_add_filter_programPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_write_add_filter_program');
  late final _archive_write_add_filter_program =
      _archive_write_add_filter_programPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_write_add_filter_uuencode(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_uuencode(
      arg0,
    );
  }

  late final _archive_write_add_filter_uuencodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_uuencode');
  late final _archive_write_add_filter_uuencode =
      _archive_write_add_filter_uuencodePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_xz(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_xz(
      arg0,
    );
  }

  late final _archive_write_add_filter_xzPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_xz');
  late final _archive_write_add_filter_xz = _archive_write_add_filter_xzPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_add_filter_zstd(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_add_filter_zstd(
      arg0,
    );
  }

  late final _archive_write_add_filter_zstdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_add_filter_zstd');
  late final _archive_write_add_filter_zstd = _archive_write_add_filter_zstdPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  /// A convenience function to set the format based on the code or name.
  int archive_write_set_format(
    ffi.Pointer<archive> arg0,
    int format_code,
  ) {
    return _archive_write_set_format(
      arg0,
      format_code,
    );
  }

  late final _archive_write_set_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_write_set_format');
  late final _archive_write_set_format = _archive_write_set_formatPtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_write_set_format_by_name(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _archive_write_set_format_by_name(
      arg0,
      name,
    );
  }

  late final _archive_write_set_format_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_write_set_format_by_name');
  late final _archive_write_set_format_by_name =
      _archive_write_set_format_by_namePtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  /// To minimize link pollution, use one or more of the following.
  int archive_write_set_format_7zip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_7zip(
      arg0,
    );
  }

  late final _archive_write_set_format_7zipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_7zip');
  late final _archive_write_set_format_7zip = _archive_write_set_format_7zipPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_ar_bsd(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_ar_bsd(
      arg0,
    );
  }

  late final _archive_write_set_format_ar_bsdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_ar_bsd');
  late final _archive_write_set_format_ar_bsd =
      _archive_write_set_format_ar_bsdPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_ar_svr4(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_ar_svr4(
      arg0,
    );
  }

  late final _archive_write_set_format_ar_svr4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_ar_svr4');
  late final _archive_write_set_format_ar_svr4 =
      _archive_write_set_format_ar_svr4Ptr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_cpio(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_cpio(
      arg0,
    );
  }

  late final _archive_write_set_format_cpioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_cpio');
  late final _archive_write_set_format_cpio = _archive_write_set_format_cpioPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_cpio_bin(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_cpio_bin(
      arg0,
    );
  }

  late final _archive_write_set_format_cpio_binPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_cpio_bin');
  late final _archive_write_set_format_cpio_bin =
      _archive_write_set_format_cpio_binPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_cpio_newc(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_cpio_newc(
      arg0,
    );
  }

  late final _archive_write_set_format_cpio_newcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_cpio_newc');
  late final _archive_write_set_format_cpio_newc =
      _archive_write_set_format_cpio_newcPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_cpio_odc(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_cpio_odc(
      arg0,
    );
  }

  late final _archive_write_set_format_cpio_odcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_cpio_odc');
  late final _archive_write_set_format_cpio_odc =
      _archive_write_set_format_cpio_odcPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_cpio_pwb(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_cpio_pwb(
      arg0,
    );
  }

  late final _archive_write_set_format_cpio_pwbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_cpio_pwb');
  late final _archive_write_set_format_cpio_pwb =
      _archive_write_set_format_cpio_pwbPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_gnutar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_gnutar(
      arg0,
    );
  }

  late final _archive_write_set_format_gnutarPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_gnutar');
  late final _archive_write_set_format_gnutar =
      _archive_write_set_format_gnutarPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_iso9660(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_iso9660(
      arg0,
    );
  }

  late final _archive_write_set_format_iso9660Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_iso9660');
  late final _archive_write_set_format_iso9660 =
      _archive_write_set_format_iso9660Ptr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_mtree(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_mtree(
      arg0,
    );
  }

  late final _archive_write_set_format_mtreePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_mtree');
  late final _archive_write_set_format_mtree =
      _archive_write_set_format_mtreePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_mtree_classic(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_mtree_classic(
      arg0,
    );
  }

  late final _archive_write_set_format_mtree_classicPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_mtree_classic');
  late final _archive_write_set_format_mtree_classic =
      _archive_write_set_format_mtree_classicPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// TODO: int archive_write_set_format_old_tar(struct archive *);
  int archive_write_set_format_pax(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_pax(
      arg0,
    );
  }

  late final _archive_write_set_format_paxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_pax');
  late final _archive_write_set_format_pax = _archive_write_set_format_paxPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_pax_restricted(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_pax_restricted(
      arg0,
    );
  }

  late final _archive_write_set_format_pax_restrictedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_pax_restricted');
  late final _archive_write_set_format_pax_restricted =
      _archive_write_set_format_pax_restrictedPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_raw(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_raw(
      arg0,
    );
  }

  late final _archive_write_set_format_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_raw');
  late final _archive_write_set_format_raw = _archive_write_set_format_rawPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_shar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_shar(
      arg0,
    );
  }

  late final _archive_write_set_format_sharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_shar');
  late final _archive_write_set_format_shar = _archive_write_set_format_sharPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_shar_dump(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_shar_dump(
      arg0,
    );
  }

  late final _archive_write_set_format_shar_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_shar_dump');
  late final _archive_write_set_format_shar_dump =
      _archive_write_set_format_shar_dumpPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_ustar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_ustar(
      arg0,
    );
  }

  late final _archive_write_set_format_ustarPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_ustar');
  late final _archive_write_set_format_ustar =
      _archive_write_set_format_ustarPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_v7tar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_v7tar(
      arg0,
    );
  }

  late final _archive_write_set_format_v7tarPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_v7tar');
  late final _archive_write_set_format_v7tar =
      _archive_write_set_format_v7tarPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_warc(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_warc(
      arg0,
    );
  }

  late final _archive_write_set_format_warcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_warc');
  late final _archive_write_set_format_warc = _archive_write_set_format_warcPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_xar(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_xar(
      arg0,
    );
  }

  late final _archive_write_set_format_xarPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_xar');
  late final _archive_write_set_format_xar = _archive_write_set_format_xarPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_zip(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_set_format_zip(
      arg0,
    );
  }

  late final _archive_write_set_format_zipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_set_format_zip');
  late final _archive_write_set_format_zip = _archive_write_set_format_zipPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_set_format_filter_by_ext(
    ffi.Pointer<archive> a,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _archive_write_set_format_filter_by_ext(
      a,
      filename,
    );
  }

  late final _archive_write_set_format_filter_by_extPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>>(
      'archive_write_set_format_filter_by_ext');
  late final _archive_write_set_format_filter_by_ext =
      _archive_write_set_format_filter_by_extPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_write_set_format_filter_by_ext_def(
    ffi.Pointer<archive> a,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> def_ext,
  ) {
    return _archive_write_set_format_filter_by_ext_def(
      a,
      filename,
      def_ext,
    );
  }

  late final _archive_write_set_format_filter_by_ext_defPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'archive_write_set_format_filter_by_ext_def');
  late final _archive_write_set_format_filter_by_ext_def =
      _archive_write_set_format_filter_by_ext_defPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int archive_write_zip_set_compression_deflate(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_zip_set_compression_deflate(
      arg0,
    );
  }

  late final _archive_write_zip_set_compression_deflatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_zip_set_compression_deflate');
  late final _archive_write_zip_set_compression_deflate =
      _archive_write_zip_set_compression_deflatePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_zip_set_compression_store(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_zip_set_compression_store(
      arg0,
    );
  }

  late final _archive_write_zip_set_compression_storePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_zip_set_compression_store');
  late final _archive_write_zip_set_compression_store =
      _archive_write_zip_set_compression_storePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Deprecated; use archive_write_open2 instead
  int archive_write_open(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<archive_open_callback> arg2,
    ffi.Pointer<archive_write_callback> arg3,
    ffi.Pointer<archive_close_callback> arg4,
  ) {
    return _archive_write_open(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _archive_write_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<archive_open_callback>,
              ffi.Pointer<archive_write_callback>,
              ffi.Pointer<archive_close_callback>)>>('archive_write_open');
  late final _archive_write_open = _archive_write_openPtr.asFunction<
      int Function(
          ffi.Pointer<archive>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<archive_open_callback>,
          ffi.Pointer<archive_write_callback>,
          ffi.Pointer<archive_close_callback>)>();

  int archive_write_open2(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<archive_open_callback> arg2,
    ffi.Pointer<archive_write_callback> arg3,
    ffi.Pointer<archive_close_callback> arg4,
    ffi.Pointer<archive_free_callback> arg5,
  ) {
    return _archive_write_open2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _archive_write_open2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<archive_open_callback>,
              ffi.Pointer<archive_write_callback>,
              ffi.Pointer<archive_close_callback>,
              ffi.Pointer<archive_free_callback>)>>('archive_write_open2');
  late final _archive_write_open2 = _archive_write_open2Ptr.asFunction<
      int Function(
          ffi.Pointer<archive>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<archive_open_callback>,
          ffi.Pointer<archive_write_callback>,
          ffi.Pointer<archive_close_callback>,
          ffi.Pointer<archive_free_callback>)>();

  int archive_write_open_fd(
    ffi.Pointer<archive> arg0,
    int _fd,
  ) {
    return _archive_write_open_fd(
      arg0,
      _fd,
    );
  }

  late final _archive_write_open_fdPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_write_open_fd');
  late final _archive_write_open_fd = _archive_write_open_fdPtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_write_open_filename(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> _file,
  ) {
    return _archive_write_open_filename(
      arg0,
      _file,
    );
  }

  late final _archive_write_open_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_write_open_filename');
  late final _archive_write_open_filename = _archive_write_open_filenamePtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_write_open_filename_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.WChar> _file,
  ) {
    return _archive_write_open_filename_w(
      arg0,
      _file,
    );
  }

  late final _archive_write_open_filename_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.WChar>)>>('archive_write_open_filename_w');
  late final _archive_write_open_filename_w = _archive_write_open_filename_wPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>)>();

  /// A deprecated synonym for archive_write_open_filename()
  int archive_write_open_file(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> _file,
  ) {
    return _archive_write_open_file(
      arg0,
      _file,
    );
  }

  late final _archive_write_open_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_write_open_file');
  late final _archive_write_open_file = _archive_write_open_filePtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_write_open_FILE(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _archive_write_open_FILE(
      arg0,
      arg1,
    );
  }

  late final _archive_write_open_FILEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<FILE>)>>('archive_write_open_FILE');
  late final _archive_write_open_FILE = _archive_write_open_FILEPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<FILE>)>();

  /// _buffSize is the size of the buffer, _used refers to a variable that
  /// will be updated after each write into the buffer.
  int archive_write_open_memory(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> _buffer,
    int _buffSize,
    ffi.Pointer<ffi.Size> _used,
  ) {
    return _archive_write_open_memory(
      arg0,
      _buffer,
      _buffSize,
      _used,
    );
  }

  late final _archive_write_open_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Pointer<ffi.Size>)>>('archive_write_open_memory');
  late final _archive_write_open_memory =
      _archive_write_open_memoryPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Size>)>();

  /// Note that the library will truncate writes beyond the size provided
  /// to archive_write_header or pad if the provided data is short.
  int archive_write_header(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_entry> arg1,
  ) {
    return _archive_write_header(
      arg0,
      arg1,
    );
  }

  late final _archive_write_headerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<archive_entry>)>>('archive_write_header');
  late final _archive_write_header = _archive_write_headerPtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>)>();

  int archive_write_data(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _archive_write_data(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_write_dataPtr = _lookup<
      ffi.NativeFunction<
          la_ssize_t1 Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('archive_write_data');
  late final _archive_write_data = _archive_write_dataPtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, int)>();

  /// This interface is currently only available for archive_write_disk handles.
  int archive_write_data_block(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    int arg3,
  ) {
    return _archive_write_data_block(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_write_data_blockPtr = _lookup<
      ffi.NativeFunction<
          la_ssize_t1 Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.Size, la_int64_t1)>>('archive_write_data_block');
  late final _archive_write_data_block =
      _archive_write_data_blockPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, int, int)>();

  int archive_write_finish_entry(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_finish_entry(
      arg0,
    );
  }

  late final _archive_write_finish_entryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_finish_entry');
  late final _archive_write_finish_entry = _archive_write_finish_entryPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_write_close(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_close(
      arg0,
    );
  }

  late final _archive_write_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_close');
  late final _archive_write_close =
      _archive_write_closePtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// Marks the archive as FATAL so that a subsequent free() operation
  /// won't try to close() cleanly.  Provides a fast abort capability
  /// when the client discovers that things have gone wrong.
  int archive_write_fail(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_fail(
      arg0,
    );
  }

  late final _archive_write_failPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_fail');
  late final _archive_write_fail =
      _archive_write_failPtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// This can fail if the archive wasn't already closed, in which case
  /// archive_write_free() will implicitly call archive_write_close().
  int archive_write_free(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_free(
      arg0,
    );
  }

  late final _archive_write_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_free');
  late final _archive_write_free =
      _archive_write_freePtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// Synonym for archive_write_free() for backwards compatibility.
  int archive_write_finish(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_finish(
      arg0,
    );
  }

  late final _archive_write_finishPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_finish');
  late final _archive_write_finish =
      _archive_write_finishPtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// Set write options.
  /// /
  /// /* Apply option to the format only.
  int archive_write_set_format_option(
    ffi.Pointer<archive> _a,
    ffi.Pointer<ffi.Char> m,
    ffi.Pointer<ffi.Char> o,
    ffi.Pointer<ffi.Char> v,
  ) {
    return _archive_write_set_format_option(
      _a,
      m,
      o,
      v,
    );
  }

  late final _archive_write_set_format_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('archive_write_set_format_option');
  late final _archive_write_set_format_option =
      _archive_write_set_format_optionPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Apply option to the filter only.
  int archive_write_set_filter_option(
    ffi.Pointer<archive> _a,
    ffi.Pointer<ffi.Char> m,
    ffi.Pointer<ffi.Char> o,
    ffi.Pointer<ffi.Char> v,
  ) {
    return _archive_write_set_filter_option(
      _a,
      m,
      o,
      v,
    );
  }

  late final _archive_write_set_filter_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('archive_write_set_filter_option');
  late final _archive_write_set_filter_option =
      _archive_write_set_filter_optionPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Apply option to both the format and the filter.
  int archive_write_set_option(
    ffi.Pointer<archive> _a,
    ffi.Pointer<ffi.Char> m,
    ffi.Pointer<ffi.Char> o,
    ffi.Pointer<ffi.Char> v,
  ) {
    return _archive_write_set_option(
      _a,
      m,
      o,
      v,
    );
  }

  late final _archive_write_set_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('archive_write_set_option');
  late final _archive_write_set_option =
      _archive_write_set_optionPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Apply option string to both the format and the filter.
  int archive_write_set_options(
    ffi.Pointer<archive> _a,
    ffi.Pointer<ffi.Char> opts,
  ) {
    return _archive_write_set_options(
      _a,
      opts,
    );
  }

  late final _archive_write_set_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_write_set_options');
  late final _archive_write_set_options = _archive_write_set_optionsPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  /// Set a encryption passphrase.
  int archive_write_set_passphrase(
    ffi.Pointer<archive> _a,
    ffi.Pointer<ffi.Char> p,
  ) {
    return _archive_write_set_passphrase(
      _a,
      p,
    );
  }

  late final _archive_write_set_passphrasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_write_set_passphrase');
  late final _archive_write_set_passphrase = _archive_write_set_passphrasePtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_write_set_passphrase_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> client_data,
    ffi.Pointer<archive_passphrase_callback> arg2,
  ) {
    return _archive_write_set_passphrase_callback(
      arg0,
      client_data,
      arg2,
    );
  }

  late final _archive_write_set_passphrase_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<archive_passphrase_callback>)>>(
      'archive_write_set_passphrase_callback');
  late final _archive_write_set_passphrase_callback =
      _archive_write_set_passphrase_callbackPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<archive_passphrase_callback>)>();

  /// -
  /// ARCHIVE_WRITE_DISK API
  ///
  /// To create objects on disk:
  /// 1) Ask archive_write_disk_new for a new archive_write_disk object.
  /// 2) Set any global properties.  In particular, you probably
  /// want to set the options.
  /// 3) For each entry:
  /// - construct an appropriate struct archive_entry structure
  /// - archive_write_header to create the file/dir/etc on disk
  /// - archive_write_data to write the entry data
  /// 4) archive_write_free to cleanup the writer and release resources
  ///
  /// In particular, you can use this in conjunction with archive_read()
  /// to pull entries out of an archive and create them on disk.
  ffi.Pointer<archive> archive_write_disk_new() {
    return _archive_write_disk_new();
  }

  late final _archive_write_disk_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<archive> Function()>>(
          'archive_write_disk_new');
  late final _archive_write_disk_new =
      _archive_write_disk_newPtr.asFunction<ffi.Pointer<archive> Function()>();

  /// This file will not be overwritten.
  int archive_write_disk_set_skip_file(
    ffi.Pointer<archive> arg0,
    int arg1,
    int arg2,
  ) {
    return _archive_write_disk_set_skip_file(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_write_disk_set_skip_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, la_int64_t1,
              la_int64_t1)>>('archive_write_disk_set_skip_file');
  late final _archive_write_disk_set_skip_file =
      _archive_write_disk_set_skip_filePtr
          .asFunction<int Function(ffi.Pointer<archive>, int, int)>();

  /// Set flags to control how the next item gets created.
  /// This accepts a bitmask of ARCHIVE_EXTRACT_XXX flags defined above.
  int archive_write_disk_set_options(
    ffi.Pointer<archive> arg0,
    int flags,
  ) {
    return _archive_write_disk_set_options(
      arg0,
      flags,
    );
  }

  late final _archive_write_disk_set_optionsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_write_disk_set_options');
  late final _archive_write_disk_set_options =
      _archive_write_disk_set_optionsPtr
          .asFunction<int Function(ffi.Pointer<archive>, int)>();

  /// The lookup functions are given uname/uid (or gname/gid) pairs and
  /// return a uid (gid) suitable for this system.  These are used for
  /// restoring ownership and for setting ACLs.  The default functions
  /// are naive, they just return the uid/gid.  These are small, so reasonable
  /// for applications that don't need to preserve ownership; they
  /// are probably also appropriate for applications that are doing
  /// same-system backup and restore.
  /// /
  /// /*
  /// The "standard" lookup functions use common system calls to lookup
  /// the uname/gname, falling back to the uid/gid if the names can't be
  /// found.  They cache lookups and are reasonably fast, but can be very
  /// large, so they are not used unless you ask for them.  In
  /// particular, these match the specifications of POSIX "pax" and old
  /// POSIX "tar".
  int archive_write_disk_set_standard_lookup(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_write_disk_set_standard_lookup(
      arg0,
    );
  }

  late final _archive_write_disk_set_standard_lookupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_write_disk_set_standard_lookup');
  late final _archive_write_disk_set_standard_lookup =
      _archive_write_disk_set_standard_lookupPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// If neither the default (naive) nor the standard (big) functions suit
  /// your needs, you can write your own and register them.  Be sure to
  /// include a cleanup function if you have allocated private data.
  int archive_write_disk_set_group_lookup(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                la_int64_t1 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, la_int64_t1)>>
        arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _archive_write_disk_set_group_lookup(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_write_disk_set_group_lookupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          la_int64_t1 Function(ffi.Pointer<ffi.Void>,
                              ffi.Pointer<ffi.Char>, la_int64_t1)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'archive_write_disk_set_group_lookup');
  late final _archive_write_disk_set_group_lookup =
      _archive_write_disk_set_group_lookupPtr.asFunction<
          int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      la_int64_t1 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, la_int64_t1)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int archive_write_disk_set_user_lookup(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                la_int64_t1 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, la_int64_t1)>>
        arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _archive_write_disk_set_user_lookup(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_write_disk_set_user_lookupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          la_int64_t1 Function(ffi.Pointer<ffi.Void>,
                              ffi.Pointer<ffi.Char>, la_int64_t1)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'archive_write_disk_set_user_lookup');
  late final _archive_write_disk_set_user_lookup =
      _archive_write_disk_set_user_lookupPtr.asFunction<
          int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      la_int64_t1 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, la_int64_t1)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int archive_write_disk_gid(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _archive_write_disk_gid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_write_disk_gidPtr = _lookup<
      ffi.NativeFunction<
          la_int64_t1 Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              la_int64_t1)>>('archive_write_disk_gid');
  late final _archive_write_disk_gid = _archive_write_disk_gidPtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>, int)>();

  int archive_write_disk_uid(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _archive_write_disk_uid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _archive_write_disk_uidPtr = _lookup<
      ffi.NativeFunction<
          la_int64_t1 Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              la_int64_t1)>>('archive_write_disk_uid');
  late final _archive_write_disk_uid = _archive_write_disk_uidPtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>, int)>();

  /// ARCHIVE_READ_DISK API
  ///
  /// This is still evolving and somewhat experimental.
  ffi.Pointer<archive> archive_read_disk_new() {
    return _archive_read_disk_new();
  }

  late final _archive_read_disk_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<archive> Function()>>(
          'archive_read_disk_new');
  late final _archive_read_disk_new =
      _archive_read_disk_newPtr.asFunction<ffi.Pointer<archive> Function()>();

  /// The names for symlink modes here correspond to an old BSD
  /// command-line argument convention: -L, -P, -H */
  /// /* Follow all symlinks.
  int archive_read_disk_set_symlink_logical(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_set_symlink_logical(
      arg0,
    );
  }

  late final _archive_read_disk_set_symlink_logicalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_set_symlink_logical');
  late final _archive_read_disk_set_symlink_logical =
      _archive_read_disk_set_symlink_logicalPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Follow no symlinks.
  int archive_read_disk_set_symlink_physical(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_set_symlink_physical(
      arg0,
    );
  }

  late final _archive_read_disk_set_symlink_physicalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_set_symlink_physical');
  late final _archive_read_disk_set_symlink_physical =
      _archive_read_disk_set_symlink_physicalPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Follow symlink initially, then not.
  int archive_read_disk_set_symlink_hybrid(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_set_symlink_hybrid(
      arg0,
    );
  }

  late final _archive_read_disk_set_symlink_hybridPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_set_symlink_hybrid');
  late final _archive_read_disk_set_symlink_hybrid =
      _archive_read_disk_set_symlink_hybridPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// TODO: Handle Linux stat32/stat64 ugliness. <sigh>
  int archive_read_disk_entry_from_file(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_entry> arg1,
    int arg2,
    ffi.Pointer<stat> arg3,
  ) {
    return _archive_read_disk_entry_from_file(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_read_disk_entry_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<archive_entry>,
              ffi.Int,
              ffi.Pointer<stat>)>>('archive_read_disk_entry_from_file');
  late final _archive_read_disk_entry_from_file =
      _archive_read_disk_entry_from_filePtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>, int,
              ffi.Pointer<stat>)>();

  /// Look up gname for gid or uname for uid. */
  /// /* Default implementations are very, very stupid.
  ffi.Pointer<ffi.Char> archive_read_disk_gname(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_read_disk_gname(
      arg0,
      arg1,
    );
  }

  late final _archive_read_disk_gnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive>, la_int64_t1)>>('archive_read_disk_gname');
  late final _archive_read_disk_gname = _archive_read_disk_gnamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive>, int)>();

  ffi.Pointer<ffi.Char> archive_read_disk_uname(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_read_disk_uname(
      arg0,
      arg1,
    );
  }

  late final _archive_read_disk_unamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive>, la_int64_t1)>>('archive_read_disk_uname');
  late final _archive_read_disk_uname = _archive_read_disk_unamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive>, int)>();

  /// "Standard" implementation uses getpwuid_r, getgrgid_r and caches the
  /// results for performance.
  int archive_read_disk_set_standard_lookup(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_set_standard_lookup(
      arg0,
    );
  }

  late final _archive_read_disk_set_standard_lookupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_set_standard_lookup');
  late final _archive_read_disk_set_standard_lookup =
      _archive_read_disk_set_standard_lookupPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// You can install your own lookups if you like.
  int archive_read_disk_set_gname_lookup(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(
                    ffi.Pointer<ffi.Void>, la_int64_t1)>>
        arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _archive_read_disk_set_gname_lookup(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_read_disk_set_gname_lookupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Char> Function(
                              ffi.Pointer<ffi.Void>, la_int64_t1)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'archive_read_disk_set_gname_lookup');
  late final _archive_read_disk_set_gname_lookup =
      _archive_read_disk_set_gname_lookupPtr.asFunction<
          int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>, la_int64_t1)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int archive_read_disk_set_uname_lookup(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(
                    ffi.Pointer<ffi.Void>, la_int64_t1)>>
        arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
  ) {
    return _archive_read_disk_set_uname_lookup(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _archive_read_disk_set_uname_lookupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Char> Function(
                              ffi.Pointer<ffi.Void>, la_int64_t1)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'archive_read_disk_set_uname_lookup');
  late final _archive_read_disk_set_uname_lookup =
      _archive_read_disk_set_uname_lookupPtr.asFunction<
          int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>, la_int64_t1)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  /// Start traversal.
  int archive_read_disk_open(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_read_disk_open(
      arg0,
      arg1,
    );
  }

  late final _archive_read_disk_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_read_disk_open');
  late final _archive_read_disk_open = _archive_read_disk_openPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_read_disk_open_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_read_disk_open_w(
      arg0,
      arg1,
    );
  }

  late final _archive_read_disk_open_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.WChar>)>>('archive_read_disk_open_w');
  late final _archive_read_disk_open_w = _archive_read_disk_open_wPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>)>();

  /// Request that current entry be visited.  If you invoke it on every
  /// directory, you'll get a physical traversal.  This is ignored if the
  /// current entry isn't a directory or a link to a directory.  So, if
  /// you invoke this on every returned path, you'll get a full logical
  /// traversal.
  int archive_read_disk_descend(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_descend(
      arg0,
    );
  }

  late final _archive_read_disk_descendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_descend');
  late final _archive_read_disk_descend = _archive_read_disk_descendPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_disk_can_descend(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_can_descend(
      arg0,
    );
  }

  late final _archive_read_disk_can_descendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_can_descend');
  late final _archive_read_disk_can_descend = _archive_read_disk_can_descendPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_disk_current_filesystem(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_current_filesystem(
      arg0,
    );
  }

  late final _archive_read_disk_current_filesystemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_current_filesystem');
  late final _archive_read_disk_current_filesystem =
      _archive_read_disk_current_filesystemPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_disk_current_filesystem_is_synthetic(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_current_filesystem_is_synthetic(
      arg0,
    );
  }

  late final _archive_read_disk_current_filesystem_is_syntheticPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_current_filesystem_is_synthetic');
  late final _archive_read_disk_current_filesystem_is_synthetic =
      _archive_read_disk_current_filesystem_is_syntheticPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_disk_current_filesystem_is_remote(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_current_filesystem_is_remote(
      arg0,
    );
  }

  late final _archive_read_disk_current_filesystem_is_remotePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_current_filesystem_is_remote');
  late final _archive_read_disk_current_filesystem_is_remote =
      _archive_read_disk_current_filesystem_is_remotePtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Request that the access time of the entry visited by traversal be restored.
  int archive_read_disk_set_atime_restored(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_read_disk_set_atime_restored(
      arg0,
    );
  }

  late final _archive_read_disk_set_atime_restoredPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_read_disk_set_atime_restored');
  late final _archive_read_disk_set_atime_restored =
      _archive_read_disk_set_atime_restoredPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_read_disk_set_behavior(
    ffi.Pointer<archive> arg0,
    int flags,
  ) {
    return _archive_read_disk_set_behavior(
      arg0,
      flags,
    );
  }

  late final _archive_read_disk_set_behaviorPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_read_disk_set_behavior');
  late final _archive_read_disk_set_behavior =
      _archive_read_disk_set_behaviorPtr
          .asFunction<int Function(ffi.Pointer<archive>, int)>();

  /// Set archive_match object that will be used in archive_read_disk to
  /// know whether an entry should be skipped. The callback function
  /// _excluded_func will be invoked when an entry is skipped by the result
  /// of archive_match.
  int archive_read_disk_set_matching(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive> _matching,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<archive_entry>)>>
        _excluded_func,
    ffi.Pointer<ffi.Void> _client_data,
  ) {
    return _archive_read_disk_set_matching(
      arg0,
      _matching,
      _excluded_func,
      _client_data,
    );
  }

  late final _archive_read_disk_set_matchingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<archive>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<archive>,
                          ffi.Pointer<ffi.Void>, ffi.Pointer<archive_entry>)>>,
              ffi.Pointer<ffi.Void>)>>('archive_read_disk_set_matching');
  late final _archive_read_disk_set_matching =
      _archive_read_disk_set_matchingPtr.asFunction<
          int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<archive>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<archive>,
                          ffi.Pointer<ffi.Void>, ffi.Pointer<archive_entry>)>>,
              ffi.Pointer<ffi.Void>)>();

  int archive_read_disk_set_metadata_filter_callback(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<archive_entry>)>>
        _metadata_filter_func,
    ffi.Pointer<ffi.Void> _client_data,
  ) {
    return _archive_read_disk_set_metadata_filter_callback(
      arg0,
      _metadata_filter_func,
      _client_data,
    );
  }

  late final _archive_read_disk_set_metadata_filter_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<archive>,
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<archive_entry>)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'archive_read_disk_set_metadata_filter_callback');
  late final _archive_read_disk_set_metadata_filter_callback =
      _archive_read_disk_set_metadata_filter_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<archive>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<archive>,
                          ffi.Pointer<ffi.Void>, ffi.Pointer<archive_entry>)>>,
              ffi.Pointer<ffi.Void>)>();

  /// Simplified cleanup interface;
  /// This calls archive_read_free() or archive_write_free() as needed.
  int archive_free(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_free(
      arg0,
    );
  }

  late final _archive_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_free');
  late final _archive_free =
      _archive_freePtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// Number of filters in the current filter pipeline. */
  /// /* Filter #0 is the one closest to the format, -1 is a synonym for the
  /// last filter, which is always the pseudo-filter that wraps the
  /// client callbacks.
  int archive_filter_count(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_filter_count(
      arg0,
    );
  }

  late final _archive_filter_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_filter_count');
  late final _archive_filter_count =
      _archive_filter_countPtr.asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_filter_bytes(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_filter_bytes(
      arg0,
      arg1,
    );
  }

  late final _archive_filter_bytesPtr = _lookup<
      ffi.NativeFunction<
          la_int64_t1 Function(
              ffi.Pointer<archive>, ffi.Int)>>('archive_filter_bytes');
  late final _archive_filter_bytes = _archive_filter_bytesPtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_filter_code(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_filter_code(
      arg0,
      arg1,
    );
  }

  late final _archive_filter_codePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_filter_code');
  late final _archive_filter_code = _archive_filter_codePtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  ffi.Pointer<ffi.Char> archive_filter_name(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_filter_name(
      arg0,
      arg1,
    );
  }

  late final _archive_filter_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive>, ffi.Int)>>('archive_filter_name');
  late final _archive_filter_name = _archive_filter_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive>, int)>();

  /// These don't properly handle multiple filters, so are deprecated and
  /// will eventually be removed. */
  /// /* As of libarchive 3.0, this is an alias for archive_filter_bytes(a, -1);
  int archive_position_compressed(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_position_compressed(
      arg0,
    );
  }

  late final _archive_position_compressedPtr =
      _lookup<ffi.NativeFunction<la_int64_t1 Function(ffi.Pointer<archive>)>>(
          'archive_position_compressed');
  late final _archive_position_compressed = _archive_position_compressedPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  /// As of libarchive 3.0, this is an alias for archive_filter_bytes(a, 0);
  int archive_position_uncompressed(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_position_uncompressed(
      arg0,
    );
  }

  late final _archive_position_uncompressedPtr =
      _lookup<ffi.NativeFunction<la_int64_t1 Function(ffi.Pointer<archive>)>>(
          'archive_position_uncompressed');
  late final _archive_position_uncompressed = _archive_position_uncompressedPtr
      .asFunction<int Function(ffi.Pointer<archive>)>();

  /// As of libarchive 3.0, this is an alias for archive_filter_name(a, 0);
  ffi.Pointer<ffi.Char> archive_compression_name(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_compression_name(
      arg0,
    );
  }

  late final _archive_compression_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive>)>>('archive_compression_name');
  late final _archive_compression_name = _archive_compression_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive>)>();

  /// As of libarchive 3.0, this is an alias for archive_filter_code(a, 0);
  int archive_compression(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_compression(
      arg0,
    );
  }

  late final _archive_compressionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_compression');
  late final _archive_compression =
      _archive_compressionPtr.asFunction<int Function(ffi.Pointer<archive>)>();

  int archive_errno(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_errno(
      arg0,
    );
  }

  late final _archive_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_errno');
  late final _archive_errno =
      _archive_errnoPtr.asFunction<int Function(ffi.Pointer<archive>)>();

  ffi.Pointer<ffi.Char> archive_error_string(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_error_string(
      arg0,
    );
  }

  late final _archive_error_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive>)>>('archive_error_string');
  late final _archive_error_string = _archive_error_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive>)>();

  ffi.Pointer<ffi.Char> archive_format_name(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_format_name(
      arg0,
    );
  }

  late final _archive_format_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<archive>)>>('archive_format_name');
  late final _archive_format_name = _archive_format_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<archive>)>();

  int archive_format(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_format(
      arg0,
    );
  }

  late final _archive_formatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_format');
  late final _archive_format =
      _archive_formatPtr.asFunction<int Function(ffi.Pointer<archive>)>();

  void archive_clear_error(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_clear_error(
      arg0,
    );
  }

  late final _archive_clear_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<archive>)>>(
          'archive_clear_error');
  late final _archive_clear_error =
      _archive_clear_errorPtr.asFunction<void Function(ffi.Pointer<archive>)>();

  void archive_set_error(
    ffi.Pointer<archive> arg0,
    int _err,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _archive_set_error(
      arg0,
      _err,
      fmt,
    );
  }

  late final _archive_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('archive_set_error');
  late final _archive_set_error = _archive_set_errorPtr.asFunction<
      void Function(ffi.Pointer<archive>, int, ffi.Pointer<ffi.Char>)>();

  void archive_copy_error(
    ffi.Pointer<archive> dest,
    ffi.Pointer<archive> src,
  ) {
    return _archive_copy_error(
      dest,
      src,
    );
  }

  late final _archive_copy_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<archive>,
              ffi.Pointer<archive>)>>('archive_copy_error');
  late final _archive_copy_error = _archive_copy_errorPtr
      .asFunction<void Function(ffi.Pointer<archive>, ffi.Pointer<archive>)>();

  int archive_file_count(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_file_count(
      arg0,
    );
  }

  late final _archive_file_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_file_count');
  late final _archive_file_count =
      _archive_file_countPtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// ARCHIVE_MATCH API
  ffi.Pointer<archive> archive_match_new() {
    return _archive_match_new();
  }

  late final _archive_match_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<archive> Function()>>(
          'archive_match_new');
  late final _archive_match_new =
      _archive_match_newPtr.asFunction<ffi.Pointer<archive> Function()>();

  int archive_match_free(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_match_free(
      arg0,
    );
  }

  late final _archive_match_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_match_free');
  late final _archive_match_free =
      _archive_match_freePtr.asFunction<int Function(ffi.Pointer<archive>)>();

  /// Test if archive_entry is excluded.
  /// This is a convenience function. This is the same as calling all
  /// archive_match_path_excluded, archive_match_time_excluded
  /// and archive_match_owner_excluded.
  int archive_match_excluded(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_entry> arg1,
  ) {
    return _archive_match_excluded(
      arg0,
      arg1,
    );
  }

  late final _archive_match_excludedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<archive_entry>)>>('archive_match_excluded');
  late final _archive_match_excluded = _archive_match_excludedPtr.asFunction<
      int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>)>();

  /// Test if pathname is excluded. The conditions are set by following functions.
  int archive_match_path_excluded(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_entry> arg1,
  ) {
    return _archive_match_path_excluded(
      arg0,
      arg1,
    );
  }

  late final _archive_match_path_excludedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<archive_entry>)>>('archive_match_path_excluded');
  late final _archive_match_path_excluded =
      _archive_match_path_excludedPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>)>();

  /// Control recursive inclusion of directory content when directory is included. Default on.
  int archive_match_set_inclusion_recursion(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_match_set_inclusion_recursion(
      arg0,
      arg1,
    );
  }

  late final _archive_match_set_inclusion_recursionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>, ffi.Int)>>(
      'archive_match_set_inclusion_recursion');
  late final _archive_match_set_inclusion_recursion =
      _archive_match_set_inclusion_recursionPtr
          .asFunction<int Function(ffi.Pointer<archive>, int)>();

  /// Add exclusion pathname pattern.
  int archive_match_exclude_pattern(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_match_exclude_pattern(
      arg0,
      arg1,
    );
  }

  late final _archive_match_exclude_patternPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_match_exclude_pattern');
  late final _archive_match_exclude_pattern = _archive_match_exclude_patternPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_match_exclude_pattern_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_match_exclude_pattern_w(
      arg0,
      arg1,
    );
  }

  late final _archive_match_exclude_pattern_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.WChar>)>>('archive_match_exclude_pattern_w');
  late final _archive_match_exclude_pattern_w =
      _archive_match_exclude_pattern_wPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>)>();

  /// Add exclusion pathname pattern from file.
  int archive_match_exclude_pattern_from_file(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int _nullSeparator,
  ) {
    return _archive_match_exclude_pattern_from_file(
      arg0,
      arg1,
      _nullSeparator,
    );
  }

  late final _archive_match_exclude_pattern_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('archive_match_exclude_pattern_from_file');
  late final _archive_match_exclude_pattern_from_file =
      _archive_match_exclude_pattern_from_filePtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>, int)>();

  int archive_match_exclude_pattern_from_file_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int _nullSeparator,
  ) {
    return _archive_match_exclude_pattern_from_file_w(
      arg0,
      arg1,
      _nullSeparator,
    );
  }

  late final _archive_match_exclude_pattern_from_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>,
              ffi.Int)>>('archive_match_exclude_pattern_from_file_w');
  late final _archive_match_exclude_pattern_from_file_w =
      _archive_match_exclude_pattern_from_file_wPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>, int)>();

  /// Add inclusion pathname pattern.
  int archive_match_include_pattern(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_match_include_pattern(
      arg0,
      arg1,
    );
  }

  late final _archive_match_include_patternPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_match_include_pattern');
  late final _archive_match_include_pattern = _archive_match_include_patternPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_match_include_pattern_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_match_include_pattern_w(
      arg0,
      arg1,
    );
  }

  late final _archive_match_include_pattern_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.WChar>)>>('archive_match_include_pattern_w');
  late final _archive_match_include_pattern_w =
      _archive_match_include_pattern_wPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>)>();

  /// Add inclusion pathname pattern from file.
  int archive_match_include_pattern_from_file(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int _nullSeparator,
  ) {
    return _archive_match_include_pattern_from_file(
      arg0,
      arg1,
      _nullSeparator,
    );
  }

  late final _archive_match_include_pattern_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('archive_match_include_pattern_from_file');
  late final _archive_match_include_pattern_from_file =
      _archive_match_include_pattern_from_filePtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>, int)>();

  int archive_match_include_pattern_from_file_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int _nullSeparator,
  ) {
    return _archive_match_include_pattern_from_file_w(
      arg0,
      arg1,
      _nullSeparator,
    );
  }

  late final _archive_match_include_pattern_from_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>,
              ffi.Int)>>('archive_match_include_pattern_from_file_w');
  late final _archive_match_include_pattern_from_file_w =
      _archive_match_include_pattern_from_file_wPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>, int)>();

  /// How to get statistic information for inclusion patterns.
  /// /
  /// /* Return the amount number of unmatched inclusion patterns.
  int archive_match_path_unmatched_inclusions(
    ffi.Pointer<archive> arg0,
  ) {
    return _archive_match_path_unmatched_inclusions(
      arg0,
    );
  }

  late final _archive_match_path_unmatched_inclusionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<archive>)>>(
          'archive_match_path_unmatched_inclusions');
  late final _archive_match_path_unmatched_inclusions =
      _archive_match_path_unmatched_inclusionsPtr
          .asFunction<int Function(ffi.Pointer<archive>)>();

  /// Return the pattern of unmatched inclusion with ARCHIVE_OK.
  /// Return ARCHIVE_EOF if there is no inclusion pattern.
  int archive_match_path_unmatched_inclusions_next(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _archive_match_path_unmatched_inclusions_next(
      arg0,
      arg1,
    );
  }

  late final _archive_match_path_unmatched_inclusions_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'archive_match_path_unmatched_inclusions_next');
  late final _archive_match_path_unmatched_inclusions_next =
      _archive_match_path_unmatched_inclusions_nextPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int archive_match_path_unmatched_inclusions_next_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
  ) {
    return _archive_match_path_unmatched_inclusions_next_w(
      arg0,
      arg1,
    );
  }

  late final _archive_match_path_unmatched_inclusions_next_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<archive>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>(
      'archive_match_path_unmatched_inclusions_next_w');
  late final _archive_match_path_unmatched_inclusions_next_w =
      _archive_match_path_unmatched_inclusions_next_wPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  /// Test if a file is excluded by its time stamp.
  /// The conditions are set by following functions.
  int archive_match_time_excluded(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_entry> arg1,
  ) {
    return _archive_match_time_excluded(
      arg0,
      arg1,
    );
  }

  late final _archive_match_time_excludedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<archive_entry>)>>('archive_match_time_excluded');
  late final _archive_match_time_excluded =
      _archive_match_time_excludedPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>)>();

  /// Set inclusion time.
  int archive_match_include_time(
    ffi.Pointer<archive> arg0,
    int _flag,
    int _sec,
    int _nsec,
  ) {
    return _archive_match_include_time(
      arg0,
      _flag,
      _sec,
      _nsec,
    );
  }

  late final _archive_match_include_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Int, time_t,
              ffi.Long)>>('archive_match_include_time');
  late final _archive_match_include_time = _archive_match_include_timePtr
      .asFunction<int Function(ffi.Pointer<archive>, int, int, int)>();

  /// Set inclusion time by a date string.
  int archive_match_include_date(
    ffi.Pointer<archive> arg0,
    int _flag,
    ffi.Pointer<ffi.Char> _datestr,
  ) {
    return _archive_match_include_date(
      arg0,
      _flag,
      _datestr,
    );
  }

  late final _archive_match_include_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('archive_match_include_date');
  late final _archive_match_include_date =
      _archive_match_include_datePtr.asFunction<
          int Function(ffi.Pointer<archive>, int, ffi.Pointer<ffi.Char>)>();

  int archive_match_include_date_w(
    ffi.Pointer<archive> arg0,
    int _flag,
    ffi.Pointer<ffi.WChar> _datestr,
  ) {
    return _archive_match_include_date_w(
      arg0,
      _flag,
      _datestr,
    );
  }

  late final _archive_match_include_date_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Int,
              ffi.Pointer<ffi.WChar>)>>('archive_match_include_date_w');
  late final _archive_match_include_date_w =
      _archive_match_include_date_wPtr.asFunction<
          int Function(ffi.Pointer<archive>, int, ffi.Pointer<ffi.WChar>)>();

  /// Set inclusion time by a particular file.
  int archive_match_include_file_time(
    ffi.Pointer<archive> arg0,
    int _flag,
    ffi.Pointer<ffi.Char> _pathname,
  ) {
    return _archive_match_include_file_time(
      arg0,
      _flag,
      _pathname,
    );
  }

  late final _archive_match_include_file_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('archive_match_include_file_time');
  late final _archive_match_include_file_time =
      _archive_match_include_file_timePtr.asFunction<
          int Function(ffi.Pointer<archive>, int, ffi.Pointer<ffi.Char>)>();

  int archive_match_include_file_time_w(
    ffi.Pointer<archive> arg0,
    int _flag,
    ffi.Pointer<ffi.WChar> _pathname,
  ) {
    return _archive_match_include_file_time_w(
      arg0,
      _flag,
      _pathname,
    );
  }

  late final _archive_match_include_file_time_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Int,
              ffi.Pointer<ffi.WChar>)>>('archive_match_include_file_time_w');
  late final _archive_match_include_file_time_w =
      _archive_match_include_file_time_wPtr.asFunction<
          int Function(ffi.Pointer<archive>, int, ffi.Pointer<ffi.WChar>)>();

  /// Add exclusion entry.
  int archive_match_exclude_entry(
    ffi.Pointer<archive> arg0,
    int _flag,
    ffi.Pointer<archive_entry> arg2,
  ) {
    return _archive_match_exclude_entry(
      arg0,
      _flag,
      arg2,
    );
  }

  late final _archive_match_exclude_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>, ffi.Int,
              ffi.Pointer<archive_entry>)>>('archive_match_exclude_entry');
  late final _archive_match_exclude_entry =
      _archive_match_exclude_entryPtr.asFunction<
          int Function(
              ffi.Pointer<archive>, int, ffi.Pointer<archive_entry>)>();

  /// Test if a file is excluded by its uid ,gid, uname or gname.
  /// The conditions are set by following functions.
  int archive_match_owner_excluded(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<archive_entry> arg1,
  ) {
    return _archive_match_owner_excluded(
      arg0,
      arg1,
    );
  }

  late final _archive_match_owner_excludedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<archive_entry>)>>('archive_match_owner_excluded');
  late final _archive_match_owner_excluded =
      _archive_match_owner_excludedPtr.asFunction<
          int Function(ffi.Pointer<archive>, ffi.Pointer<archive_entry>)>();

  /// Add inclusion uid, gid, uname and gname.
  int archive_match_include_uid(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_match_include_uid(
      arg0,
      arg1,
    );
  }

  late final _archive_match_include_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>, la_int64_t1)>>('archive_match_include_uid');
  late final _archive_match_include_uid = _archive_match_include_uidPtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_match_include_gid(
    ffi.Pointer<archive> arg0,
    int arg1,
  ) {
    return _archive_match_include_gid(
      arg0,
      arg1,
    );
  }

  late final _archive_match_include_gidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<archive>, la_int64_t1)>>('archive_match_include_gid');
  late final _archive_match_include_gid = _archive_match_include_gidPtr
      .asFunction<int Function(ffi.Pointer<archive>, int)>();

  int archive_match_include_uname(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_match_include_uname(
      arg0,
      arg1,
    );
  }

  late final _archive_match_include_unamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_match_include_uname');
  late final _archive_match_include_uname = _archive_match_include_unamePtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_match_include_uname_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_match_include_uname_w(
      arg0,
      arg1,
    );
  }

  late final _archive_match_include_uname_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.WChar>)>>('archive_match_include_uname_w');
  late final _archive_match_include_uname_w = _archive_match_include_uname_wPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>)>();

  int archive_match_include_gname(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _archive_match_include_gname(
      arg0,
      arg1,
    );
  }

  late final _archive_match_include_gnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.Char>)>>('archive_match_include_gname');
  late final _archive_match_include_gname = _archive_match_include_gnamePtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Char>)>();

  int archive_match_include_gname_w(
    ffi.Pointer<archive> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _archive_match_include_gname_w(
      arg0,
      arg1,
    );
  }

  late final _archive_match_include_gname_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<archive>,
              ffi.Pointer<ffi.WChar>)>>('archive_match_include_gname_w');
  late final _archive_match_include_gname_w = _archive_match_include_gname_wPtr
      .asFunction<int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.WChar>)>();

  /// Utility functions */
  /// /* Convenience function to sort a NULL terminated list of strings
  int archive_utility_string_sort(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ) {
    return _archive_utility_string_sort(
      arg0,
    );
  }

  late final _archive_utility_string_sortPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'archive_utility_string_sort');
  late final _archive_utility_string_sort = _archive_utility_string_sortPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();
}

/// Description of an archive entry.
///
/// You can think of this as "struct stat" with some text fields added in.
///
/// TODO: Add "comment", "charset", and possibly other entries that are
/// supported by "pax interchange" format.  However, GNU, ustar, cpio,
/// and other variants don't support these features, so they're not an
/// excruciatingly high priority right now.
///
/// TODO: "pax interchange" format allows essentially arbitrary
/// key/value attributes to be attached to any entry.  Supporting
/// such extensions may make this library useful for special
/// applications (e.g., a package manager could attach special
/// package-management attributes to each entry).
class archive extends ffi.Opaque {}

class archive_entry extends ffi.Opaque {}

typedef time_t = __time64_t;
typedef __time64_t = ffi.LongLong;
typedef dev_t = _dev_t;
typedef _dev_t = ffi.UnsignedInt;
typedef la_int64_t = ffi.LongLong;
typedef BY_HANDLE_FILE_INFORMATION = _BY_HANDLE_FILE_INFORMATION;

class _BY_HANDLE_FILE_INFORMATION extends ffi.Struct {
  @DWORD()
  external int dwFileAttributes;

  external FILETIME ftCreationTime;

  external FILETIME ftLastAccessTime;

  external FILETIME ftLastWriteTime;

  @DWORD()
  external int dwVolumeSerialNumber;

  @DWORD()
  external int nFileSizeHigh;

  @DWORD()
  external int nFileSizeLow;

  @DWORD()
  external int nNumberOfLinks;

  @DWORD()
  external int nFileIndexHigh;

  @DWORD()
  external int nFileIndexLow;
}

typedef DWORD = ffi.UnsignedLong;
typedef FILETIME = _FILETIME;

class _FILETIME extends ffi.Struct {
  @DWORD()
  external int dwLowDateTime;

  @DWORD()
  external int dwHighDateTime;
}

class stat extends ffi.Opaque {}

typedef la_ssize_t = ffi.LongLong;

/// Return an opaque ACL object. */
/// /* There's not yet anything clients can actually do with this...
class archive_acl extends ffi.Opaque {}

/// Utility to match up hardlinks.
///
/// The 'struct archive_entry_linkresolver' is a cache of archive entries
/// for files with multiple links.  Here's how to use it:
/// 1. Create a lookup object with archive_entry_linkresolver_new()
/// 2. Tell it the archive format you're using.
/// 3. Hand each archive_entry to archive_entry_linkify().
/// That function will return 0, 1, or 2 entries that should
/// be written.
/// 4. Call archive_entry_linkify(resolver, NULL) until
/// no more entries are returned.
/// 5. Call archive_entry_linkresolver_free(resolver) to free resources.
///
/// The entries returned have their hardlink and size fields updated
/// appropriately.  If an entry is passed in that does not refer to
/// a file with multiple links, it is returned unchanged.  The intention
/// is that you should be able to simply filter all entries through
/// this machine.
///
/// To make things more efficient, be sure that each entry has a valid
/// nlinks value.  The hardlink cache uses this to track when all links
/// have been found.  If the nlinks value is zero, it will keep every
/// name in the cache indefinitely, which can use a lot of memory.
///
/// Note that archive_entry_size() is reset to zero if the file
/// body should not be written to the archive.  Pay attention!
class archive_entry_linkresolver extends ffi.Opaque {}

typedef archive_open_callback = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>)>;

/// Returns pointer and size of next block of data from archive.
typedef archive_read_callback = ffi.NativeFunction<
    la_ssize_t1 Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Pointer<ffi.Void>>)>;
typedef la_ssize_t1 = ffi.LongLong;

/// Seeks to specified location in the file and returns the position.
/// Whence values are SEEK_SET, SEEK_CUR, SEEK_END from stdio.h.
/// Return ARCHIVE_FATAL if the seek fails for any reason.
typedef archive_seek_callback = ffi.NativeFunction<
    la_int64_t1 Function(
        ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, la_int64_t1, ffi.Int)>;
typedef la_int64_t1 = ffi.LongLong;

/// Skips at most request bytes from archive and returns the skipped amount.
/// This may skip fewer bytes than requested; it may even skip zero bytes.
/// If you do skip fewer bytes than requested, libarchive will invoke your
/// read callback and discard data as necessary to make up the full skip.
typedef archive_skip_callback = ffi.NativeFunction<
    la_int64_t1 Function(
        ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, la_int64_t1)>;
typedef archive_close_callback = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>)>;

/// Switches from one client data object to the next/prev client data object.
/// This is useful for reading from different data blocks such as a set of files
/// that make up one large file.
typedef archive_switch_callback = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<archive>, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>;
typedef FILE = _iobuf;

class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

/// Returns a passphrase used for encryption or decryption, NULL on nothing
/// to do and give it up.
typedef archive_passphrase_callback = ffi.NativeFunction<
    ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<archive>, ffi.Pointer<ffi.Void>)>;

/// Returns size actually written, zero on EOF, -1 on error.
typedef archive_write_callback = ffi.NativeFunction<
    la_ssize_t1 Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Void>, ffi.Size)>;
typedef archive_free_callback = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<archive>, ffi.Pointer<ffi.Void>)>;

const int ARCHIVE_VERSION_NUMBER = 3006002;

const int AE_IFMT = 61440;

const int AE_IFREG = 32768;

const int AE_IFLNK = 40960;

const int AE_IFSOCK = 49152;

const int AE_IFCHR = 8192;

const int AE_IFBLK = 24576;

const int AE_IFDIR = 16384;

const int AE_IFIFO = 4096;

const int AE_SYMLINK_TYPE_UNDEFINED = 0;

const int AE_SYMLINK_TYPE_FILE = 1;

const int AE_SYMLINK_TYPE_DIRECTORY = 2;

const int ARCHIVE_ENTRY_DIGEST_MD5 = 1;

const int ARCHIVE_ENTRY_DIGEST_RMD160 = 2;

const int ARCHIVE_ENTRY_DIGEST_SHA1 = 3;

const int ARCHIVE_ENTRY_DIGEST_SHA256 = 4;

const int ARCHIVE_ENTRY_DIGEST_SHA384 = 5;

const int ARCHIVE_ENTRY_DIGEST_SHA512 = 6;

const int ARCHIVE_ENTRY_ACL_EXECUTE = 1;

const int ARCHIVE_ENTRY_ACL_WRITE = 2;

const int ARCHIVE_ENTRY_ACL_READ = 4;

const int ARCHIVE_ENTRY_ACL_READ_DATA = 8;

const int ARCHIVE_ENTRY_ACL_LIST_DIRECTORY = 8;

const int ARCHIVE_ENTRY_ACL_WRITE_DATA = 16;

const int ARCHIVE_ENTRY_ACL_ADD_FILE = 16;

const int ARCHIVE_ENTRY_ACL_APPEND_DATA = 32;

const int ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY = 32;

const int ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS = 64;

const int ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS = 128;

const int ARCHIVE_ENTRY_ACL_DELETE_CHILD = 256;

const int ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES = 512;

const int ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES = 1024;

const int ARCHIVE_ENTRY_ACL_DELETE = 2048;

const int ARCHIVE_ENTRY_ACL_READ_ACL = 4096;

const int ARCHIVE_ENTRY_ACL_WRITE_ACL = 8192;

const int ARCHIVE_ENTRY_ACL_WRITE_OWNER = 16384;

const int ARCHIVE_ENTRY_ACL_SYNCHRONIZE = 32768;

const int ARCHIVE_ENTRY_ACL_PERMS_POSIX1E = 7;

const int ARCHIVE_ENTRY_ACL_PERMS_NFS4 = 65529;

const int ARCHIVE_ENTRY_ACL_ENTRY_INHERITED = 16777216;

const int ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT = 33554432;

const int ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT = 67108864;

const int ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT = 134217728;

const int ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY = 268435456;

const int ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS = 536870912;

const int ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS = 1073741824;

const int ARCHIVE_ENTRY_ACL_INHERITANCE_NFS4 = 2130706432;

const int ARCHIVE_ENTRY_ACL_TYPE_ACCESS = 256;

const int ARCHIVE_ENTRY_ACL_TYPE_DEFAULT = 512;

const int ARCHIVE_ENTRY_ACL_TYPE_ALLOW = 1024;

const int ARCHIVE_ENTRY_ACL_TYPE_DENY = 2048;

const int ARCHIVE_ENTRY_ACL_TYPE_AUDIT = 4096;

const int ARCHIVE_ENTRY_ACL_TYPE_ALARM = 8192;

const int ARCHIVE_ENTRY_ACL_TYPE_POSIX1E = 768;

const int ARCHIVE_ENTRY_ACL_TYPE_NFS4 = 15360;

const int ARCHIVE_ENTRY_ACL_USER = 10001;

const int ARCHIVE_ENTRY_ACL_USER_OBJ = 10002;

const int ARCHIVE_ENTRY_ACL_GROUP = 10003;

const int ARCHIVE_ENTRY_ACL_GROUP_OBJ = 10004;

const int ARCHIVE_ENTRY_ACL_MASK = 10005;

const int ARCHIVE_ENTRY_ACL_OTHER = 10006;

const int ARCHIVE_ENTRY_ACL_EVERYONE = 10107;

const int ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID = 1;

const int ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT = 2;

const int ARCHIVE_ENTRY_ACL_STYLE_SOLARIS = 4;

const int ARCHIVE_ENTRY_ACL_STYLE_SEPARATOR_COMMA = 8;

const int ARCHIVE_ENTRY_ACL_STYLE_COMPACT = 16;

const int OLD_ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID = 1024;

const int OLD_ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT = 2048;

const String ARCHIVE_VERSION_ONLY_STRING = '3.6.2';

const String ARCHIVE_VERSION_STRING = 'libarchive 3.6.2';

const int ARCHIVE_EOF = 1;

const int ARCHIVE_OK = 0;

const int ARCHIVE_RETRY = -10;

const int ARCHIVE_WARN = -20;

const int ARCHIVE_FAILED = -25;

const int ARCHIVE_FATAL = -30;

const int ARCHIVE_FILTER_NONE = 0;

const int ARCHIVE_FILTER_GZIP = 1;

const int ARCHIVE_FILTER_BZIP2 = 2;

const int ARCHIVE_FILTER_COMPRESS = 3;

const int ARCHIVE_FILTER_PROGRAM = 4;

const int ARCHIVE_FILTER_LZMA = 5;

const int ARCHIVE_FILTER_XZ = 6;

const int ARCHIVE_FILTER_UU = 7;

const int ARCHIVE_FILTER_RPM = 8;

const int ARCHIVE_FILTER_LZIP = 9;

const int ARCHIVE_FILTER_LRZIP = 10;

const int ARCHIVE_FILTER_LZOP = 11;

const int ARCHIVE_FILTER_GRZIP = 12;

const int ARCHIVE_FILTER_LZ4 = 13;

const int ARCHIVE_FILTER_ZSTD = 14;

const int ARCHIVE_COMPRESSION_NONE = 0;

const int ARCHIVE_COMPRESSION_GZIP = 1;

const int ARCHIVE_COMPRESSION_BZIP2 = 2;

const int ARCHIVE_COMPRESSION_COMPRESS = 3;

const int ARCHIVE_COMPRESSION_PROGRAM = 4;

const int ARCHIVE_COMPRESSION_LZMA = 5;

const int ARCHIVE_COMPRESSION_XZ = 6;

const int ARCHIVE_COMPRESSION_UU = 7;

const int ARCHIVE_COMPRESSION_RPM = 8;

const int ARCHIVE_COMPRESSION_LZIP = 9;

const int ARCHIVE_COMPRESSION_LRZIP = 10;

const int ARCHIVE_FORMAT_BASE_MASK = 16711680;

const int ARCHIVE_FORMAT_CPIO = 65536;

const int ARCHIVE_FORMAT_CPIO_POSIX = 65537;

const int ARCHIVE_FORMAT_CPIO_BIN_LE = 65538;

const int ARCHIVE_FORMAT_CPIO_BIN_BE = 65539;

const int ARCHIVE_FORMAT_CPIO_SVR4_NOCRC = 65540;

const int ARCHIVE_FORMAT_CPIO_SVR4_CRC = 65541;

const int ARCHIVE_FORMAT_CPIO_AFIO_LARGE = 65542;

const int ARCHIVE_FORMAT_CPIO_PWB = 65543;

const int ARCHIVE_FORMAT_SHAR = 131072;

const int ARCHIVE_FORMAT_SHAR_BASE = 131073;

const int ARCHIVE_FORMAT_SHAR_DUMP = 131074;

const int ARCHIVE_FORMAT_TAR = 196608;

const int ARCHIVE_FORMAT_TAR_USTAR = 196609;

const int ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE = 196610;

const int ARCHIVE_FORMAT_TAR_PAX_RESTRICTED = 196611;

const int ARCHIVE_FORMAT_TAR_GNUTAR = 196612;

const int ARCHIVE_FORMAT_ISO9660 = 262144;

const int ARCHIVE_FORMAT_ISO9660_ROCKRIDGE = 262145;

const int ARCHIVE_FORMAT_ZIP = 327680;

const int ARCHIVE_FORMAT_EMPTY = 393216;

const int ARCHIVE_FORMAT_AR = 458752;

const int ARCHIVE_FORMAT_AR_GNU = 458753;

const int ARCHIVE_FORMAT_AR_BSD = 458754;

const int ARCHIVE_FORMAT_MTREE = 524288;

const int ARCHIVE_FORMAT_RAW = 589824;

const int ARCHIVE_FORMAT_XAR = 655360;

const int ARCHIVE_FORMAT_LHA = 720896;

const int ARCHIVE_FORMAT_CAB = 786432;

const int ARCHIVE_FORMAT_RAR = 851968;

const int ARCHIVE_FORMAT_7ZIP = 917504;

const int ARCHIVE_FORMAT_WARC = 983040;

const int ARCHIVE_FORMAT_RAR_V5 = 1048576;

const int ARCHIVE_READ_FORMAT_CAPS_NONE = 0;

const int ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_DATA = 1;

const int ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_METADATA = 2;

const int ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED = -2;

const int ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW = -1;

const int ARCHIVE_EXTRACT_OWNER = 1;

const int ARCHIVE_EXTRACT_PERM = 2;

const int ARCHIVE_EXTRACT_TIME = 4;

const int ARCHIVE_EXTRACT_NO_OVERWRITE = 8;

const int ARCHIVE_EXTRACT_UNLINK = 16;

const int ARCHIVE_EXTRACT_ACL = 32;

const int ARCHIVE_EXTRACT_FFLAGS = 64;

const int ARCHIVE_EXTRACT_XATTR = 128;

const int ARCHIVE_EXTRACT_SECURE_SYMLINKS = 256;

const int ARCHIVE_EXTRACT_SECURE_NODOTDOT = 512;

const int ARCHIVE_EXTRACT_NO_AUTODIR = 1024;

const int ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER = 2048;

const int ARCHIVE_EXTRACT_SPARSE = 4096;

const int ARCHIVE_EXTRACT_MAC_METADATA = 8192;

const int ARCHIVE_EXTRACT_NO_HFS_COMPRESSION = 16384;

const int ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED = 32768;

const int ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS = 65536;

const int ARCHIVE_EXTRACT_CLEAR_NOCHANGE_FFLAGS = 131072;

const int ARCHIVE_EXTRACT_SAFE_WRITES = 262144;

const int ARCHIVE_READDISK_RESTORE_ATIME = 1;

const int ARCHIVE_READDISK_HONOR_NODUMP = 2;

const int ARCHIVE_READDISK_MAC_COPYFILE = 4;

const int ARCHIVE_READDISK_NO_TRAVERSE_MOUNTS = 8;

const int ARCHIVE_READDISK_NO_XATTR = 16;

const int ARCHIVE_READDISK_NO_ACL = 32;

const int ARCHIVE_READDISK_NO_FFLAGS = 64;

const int ARCHIVE_READDISK_NO_SPARSE = 128;

const int ARCHIVE_MATCH_MTIME = 256;

const int ARCHIVE_MATCH_CTIME = 512;

const int ARCHIVE_MATCH_NEWER = 1;

const int ARCHIVE_MATCH_OLDER = 2;

const int ARCHIVE_MATCH_EQUAL = 16;
